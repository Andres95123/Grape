
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.*;
import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Estructuras.*;
import com.grape.utils.AST.Base.*;
import com.grape.Tables.*;
import com.grape.Symbols.*;
import java.util.Stack;
import java.util.HashMap;
import java.util.ArrayDeque;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\005\003\000\002\012" +
    "\004\000\002\012\002\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\013\003\000\002\013\003\000" +
    "\002\002\005\000\002\035\002\000\002\002\011\000\002" +
    "\020\003\000\002\021\006\000\002\021\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\004\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\024\003\000\002\024\003\000\002\023\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\014" +
    "\004\000\002\015\006\000\002\015\002\000\002\016\007" +
    "\000\002\017\013\000\002\017\012\000\002\017\012\000" +
    "\002\017\011\000\002\017\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\020\002\ufffe\005\016\020\022\021\012\040" +
    "\015\042\023\044\017\001\002\000\004\002\160\001\002" +
    "\000\022\002\ufffb\005\ufffb\020\ufffb\021\ufffb\036\ufffb\040" +
    "\ufffb\042\ufffb\044\ufffb\001\002\000\004\034\ufff5\001\002" +
    "\000\004\034\157\001\002\000\004\034\ufffa\001\002\000" +
    "\024\002\uffd6\005\uffd6\020\uffd6\021\uffd6\036\uffd6\040\uffd6" +
    "\041\152\042\uffd6\044\uffd6\001\002\000\004\005\151\001" +
    "\002\000\006\034\uffe4\035\uffe4\001\002\000\022\002\ufffc" +
    "\005\ufffc\020\ufffc\021\ufffc\036\ufffc\040\ufffc\042\ufffc\044" +
    "\ufffc\001\002\000\016\004\033\005\035\010\031\015\032" +
    "\020\022\021\012\001\002\000\010\014\143\020\105\021" +
    "\104\001\002\000\004\005\127\001\002\000\004\034\ufff9" +
    "\001\002\000\006\034\uffe3\035\uffe3\001\002\000\004\005" +
    "\126\001\002\000\006\034\030\044\017\001\002\000\004" +
    "\002\000\001\002\000\020\002\ufffe\005\016\020\022\021" +
    "\012\040\015\042\023\044\017\001\002\000\004\002\uffff" +
    "\001\002\000\004\034\114\001\002\000\020\004\033\005" +
    "\035\010\031\015\032\020\022\021\012\034\034\001\002" +
    "\000\016\004\033\005\035\010\031\015\032\020\022\021" +
    "\012\001\002\000\016\004\033\005\035\010\031\015\032" +
    "\020\022\021\012\001\002\000\044\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\016\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\001\002\000\004\035\106\001\002\000\050" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\016\uffeb\020" +
    "\105\021\104\022\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001" +
    "\002\000\040\007\050\010\041\011\044\012\053\013\045" +
    "\022\040\023\056\024\042\026\047\027\046\030\054\031" +
    "\055\032\043\033\051\034\052\001\002\000\044\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\016\uffea\022\uffea\023" +
    "\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\001\002\000\016\004\033\005" +
    "\035\010\031\015\032\020\022\021\012\001\002\000\016" +
    "\004\033\005\035\010\031\015\032\020\022\021\012\001" +
    "\002\000\016\004\033\005\035\010\031\015\032\020\022" +
    "\021\012\001\002\000\016\004\033\005\035\010\031\015" +
    "\032\020\022\021\012\001\002\000\016\004\033\005\035" +
    "\010\031\015\032\020\022\021\012\001\002\000\016\004" +
    "\033\005\035\010\031\015\032\020\022\021\012\001\002" +
    "\000\016\004\033\005\035\010\031\015\032\020\022\021" +
    "\012\001\002\000\016\004\033\005\035\010\031\015\032" +
    "\020\022\021\012\001\002\000\016\004\033\005\035\010" +
    "\031\015\032\020\022\021\012\001\002\000\016\004\033" +
    "\005\035\010\031\015\032\020\022\021\012\001\002\000" +
    "\012\005\016\020\022\021\012\035\064\001\002\000\016" +
    "\004\033\005\035\010\031\015\032\020\022\021\012\001" +
    "\002\000\016\004\033\005\035\010\031\015\032\020\022" +
    "\021\012\001\002\000\016\004\033\005\035\010\031\015" +
    "\032\020\022\021\012\001\002\000\016\004\033\005\035" +
    "\010\031\015\032\020\022\021\012\001\002\000\044\007" +
    "\050\010\041\011\044\012\053\013\045\016\uffda\022\uffda" +
    "\023\uffda\024\uffda\026\047\027\046\030\054\031\055\032" +
    "\043\033\051\034\uffda\035\uffda\001\002\000\044\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\016\uffde\022\uffde\023" +
    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\001\002\000\044\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\016\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\001\002\000\044\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\016\uffef\022\uffef\023\uffef\024" +
    "\uffef\026\047\027\046\030\054\031\055\032\043\033\051" +
    "\034\uffef\035\uffef\001\002\000\004\035\067\001\002\000" +
    "\016\005\016\020\022\021\012\040\015\042\023\044\017" +
    "\001\002\000\004\036\066\001\002\000\022\002\uffd1\005" +
    "\uffd1\020\uffd1\021\uffd1\036\uffd1\040\uffd1\042\uffd1\044\uffd1" +
    "\001\002\000\016\005\016\020\022\021\012\040\015\042" +
    "\023\044\017\001\002\000\004\036\071\001\002\000\022" +
    "\002\uffd3\005\uffd3\020\uffd3\021\uffd3\036\uffd3\040\uffd3\042" +
    "\uffd3\044\uffd3\001\002\000\044\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\016\uffdc\022\uffdc\023\uffdc\024\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\001\002\000\044\007\ufff2\010\ufff2\011\044\012" +
    "\053\013\045\016\ufff2\022\ufff2\023\ufff2\024\ufff2\026\047" +
    "\027\046\030\054\031\055\032\043\033\051\034\ufff2\035" +
    "\ufff2\001\002\000\044\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\016\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\001\002\000\044\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\016\uffe0\022\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\001" +
    "\002\000\044\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\016\uffee\022\uffee\023\uffee\024\uffee\026\047\027\046\030" +
    "\054\031\055\032\043\033\051\034\uffee\035\uffee\001\002" +
    "\000\044\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\016" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\026\047\027\046\030\054" +
    "\031\055\032\043\033\051\034\ufff0\035\ufff0\001\002\000" +
    "\044\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\016\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000\044" +
    "\007\050\010\041\011\044\012\053\013\045\016\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\026\047\027\046\030\054\031\055" +
    "\032\043\033\051\034\uffd9\035\uffd9\001\002\000\044\007" +
    "\ufff1\010\ufff1\011\044\012\053\013\045\016\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\047\027\046\030\054\031\055\032" +
    "\043\033\051\034\ufff1\035\ufff1\001\002\000\044\007\050" +
    "\010\041\011\044\012\053\013\045\016\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\026\047\027\046\030\054\031\055\032\043" +
    "\033\051\034\uffdb\035\uffdb\001\002\000\044\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\001\002\000\044\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\016\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\001\002\000\016\005\016\020\022\021" +
    "\012\040\015\042\023\044\017\001\002\000\004\036\110" +
    "\001\002\000\022\002\uffd0\005\uffd0\020\uffd0\021\uffd0\036" +
    "\uffd0\040\uffd0\042\uffd0\044\uffd0\001\002\000\040\007\050" +
    "\010\041\011\044\012\053\013\045\016\112\022\040\023" +
    "\056\024\042\026\047\027\046\030\054\031\055\032\043" +
    "\033\051\001\002\000\044\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\016\uffec\022\uffec\023\uffec\024\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\001\002\000\044\007\uffed\010\uffed\011\044\012\053" +
    "\013\045\016\uffed\022\uffed\023\uffed\024\uffed\026\047\027" +
    "\046\030\054\031\055\032\043\033\051\034\uffed\035\uffed" +
    "\001\002\000\016\004\033\005\035\010\031\015\032\020" +
    "\022\021\012\001\002\000\040\007\050\010\041\011\044" +
    "\012\053\013\045\022\040\023\056\024\042\026\047\027" +
    "\046\030\054\031\055\032\043\033\051\034\116\001\002" +
    "\000\012\005\016\020\022\021\012\035\120\001\002\000" +
    "\004\035\123\001\002\000\016\005\016\020\022\021\012" +
    "\040\015\042\023\044\017\001\002\000\004\036\122\001" +
    "\002\000\022\002\uffd2\005\uffd2\020\uffd2\021\uffd2\036\uffd2" +
    "\040\uffd2\042\uffd2\044\uffd2\001\002\000\016\005\016\020" +
    "\022\021\012\040\015\042\023\044\017\001\002\000\004" +
    "\036\125\001\002\000\022\002\uffd4\005\uffd4\020\uffd4\021" +
    "\uffd4\036\uffd4\040\uffd4\042\uffd4\044\uffd4\001\002\000\044" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\016\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\006\015" +
    "\133\043\134\001\002\000\006\014\131\034\ufff3\001\002" +
    "\000\016\004\033\005\035\010\031\015\032\020\022\021" +
    "\012\001\002\000\040\007\050\010\041\011\044\012\053" +
    "\013\045\022\040\023\056\024\042\026\047\027\046\030" +
    "\054\031\055\032\043\033\051\034\ufff4\001\002\000\004" +
    "\004\136\001\002\000\004\006\135\001\002\000\006\014" +
    "\ufff8\034\ufff8\001\002\000\004\016\ufff7\001\002\000\004" +
    "\016\140\001\002\000\004\043\141\001\002\000\004\006" +
    "\142\001\002\000\006\014\ufff6\034\ufff6\001\002\000\016" +
    "\004\033\005\035\010\031\015\032\020\022\021\012\001" +
    "\002\000\042\007\050\010\041\011\044\012\053\013\045" +
    "\022\040\023\056\024\042\026\047\027\046\030\054\031" +
    "\055\032\043\033\051\034\uffe2\035\uffe2\001\002\000\040" +
    "\007\050\010\041\011\044\012\053\013\045\022\040\023" +
    "\056\024\042\026\047\027\046\030\054\031\055\032\043" +
    "\033\051\035\146\001\002\000\016\005\016\020\022\021" +
    "\012\040\015\042\023\044\017\001\002\000\004\036\150" +
    "\001\002\000\024\002\uffd5\005\uffd5\020\uffd5\021\uffd5\036" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\001\002\000\044" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\016\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\004\035" +
    "\154\001\002\000\022\002\uffd8\005\uffd8\020\uffd8\021\uffd8" +
    "\036\uffd8\040\uffd8\042\uffd8\044\uffd8\001\002\000\016\005" +
    "\016\020\022\021\012\040\015\042\023\044\017\001\002" +
    "\000\004\036\156\001\002\000\022\002\uffd7\005\uffd7\020" +
    "\uffd7\021\uffd7\036\uffd7\040\uffd7\042\uffd7\044\uffd7\001\002" +
    "\000\022\002\ufffd\005\ufffd\020\ufffd\021\ufffd\036\ufffd\040" +
    "\ufffd\042\ufffd\044\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\032\005\003\006\024\012\023\013\006\014" +
    "\013\016\010\017\004\020\007\021\005\023\012\024\017" +
    "\032\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\144\032\036\001\001\000\002" +
    "\001\001\000\004\002\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\026\021\005" +
    "\001\001\000\002\001\001\000\030\006\024\012\025\013" +
    "\006\014\013\016\010\017\004\020\007\021\005\023\012" +
    "\024\017\032\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\035\032\036\001\001\000\006\031\112" +
    "\032\036\001\001\000\006\031\110\032\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\102\032\036\001" +
    "\001\000\006\031\101\032\036\001\001\000\006\031\100" +
    "\032\036\001\001\000\006\031\077\032\036\001\001\000" +
    "\006\031\076\032\036\001\001\000\006\031\075\032\036" +
    "\001\001\000\006\031\074\032\036\001\001\000\006\031" +
    "\073\032\036\001\001\000\006\031\072\032\036\001\001" +
    "\000\006\031\071\032\036\001\001\000\010\023\012\024" +
    "\062\032\020\001\001\000\006\031\061\032\036\001\001" +
    "\000\006\031\060\032\036\001\001\000\006\031\057\032" +
    "\036\001\001\000\006\031\056\032\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\064\013\006\014\013" +
    "\016\010\017\004\020\007\021\005\023\012\024\017\032" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\067\013\006\014\013\016\010\017\004\020\007\021" +
    "\005\023\012\024\017\032\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\106\013\006\014\013\016\010\017\004\020" +
    "\007\021\005\023\012\024\017\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\114\032\036\001\001" +
    "\000\002\001\001\000\010\023\012\024\116\032\020\001" +
    "\001\000\002\001\001\000\026\006\120\013\006\014\013" +
    "\016\010\017\004\020\007\021\005\023\012\024\017\032" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\123\013\006\014\013\016\010\017\004\020\007\021" +
    "\005\023\012\024\017\032\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\131\032\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\143\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\146\013\006\014\013\016\010\017\004\020" +
    "\007\021\005\023\012\024\017\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\154\013\006\014\013" +
    "\016\010\017\004\020\007\021\005\023\012\024\017\032" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;
  
  // Estructuras de datos para almacenar variables
  public SymbolTable symTable = new SymbolTable();


  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RootNode start_val = (RootNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= BLOCKS 
            {
              RootNode RESULT =null;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RootNode(bloques.toArray(new EstructuraControl[0])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCKS ::= BLOCK BLOCKS 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              bloques.addFirst(block); 
              RESULT = bloques; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCKS ::= 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		 
              ArrayDeque<EstructuraControl> newDeque = new ArrayDeque<>(); 
              RESULT = newDeque; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCK ::= COMANDOS Endline 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueComando block = (BloqueComando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= IF_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= FOR_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMANDOS ::= VAR_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDOS ::= ASSIGN_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SYM_OBTAIN ::= ID DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, 1, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 if (size.getType() != UnderlyingSymbolType.INT) {report_error("Array creation error", null);}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SYM_OBTAIN ::= ID OBracket VALUE NT$0 CBracket DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (GrapeSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, (double)size.getValue(), 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR_DEFINITION_GROUP ::= VAR_DEFINITION 
            {
              VarNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN ASSIGN EXPRESION 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  RESULT = new VarNode(s, val);
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

  RESULT = new VarNode(s, null); 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MUL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(new ValueNode(new ValueContainer(0.0,UnderlyingSymbolType.INT)), e1, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= OBracket EXPRESION CBracket 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddressNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= VALUE 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer e1 = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESPECIAL_EXPRESIONS ::= ID INCREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESPECIAL_EXPRESIONS ::= ID DECREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESPECIAL_EXPRESIONS ::= INCREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESPECIAL_EXPRESIONS ::= DECREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASSIGN_DEFINITION_GROUP ::= ASSIGN_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASSIGN_DEFINITION_GROUP ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASSIGN_DEFINITION ::= ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignNode(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION NEQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION GT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION LT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION GE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION LE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.XOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_DEFINITION ::= IF_STATEMENT ELSE_STATEMENT 
            {
              EstructuraControl RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfNode e1 = (IfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl e2 = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setElseBody(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE_STATEMENT ::= ELSE OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl elseBlock = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = elseBlock; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE_STATEMENT ::= 
            {
              EstructuraControl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_STATEMENT ::= IF EXPRESION OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              IfNode RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfNode(conditional,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR_DEFINITION ::= FOR Endline Endline OPEN_BLOCK BLOCK CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl body = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,null,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
