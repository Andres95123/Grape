
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.*;
import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Estructuras.*;
import com.grape.utils.AST.Base.*;
import com.grape.Tables.*;
import com.grape.Symbols.*;
import java.util.Stack;
import java.util.HashMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\006" +
    "\003\000\002\013\004\000\002\013\003\000\002\007\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\003\005\000\002\037" +
    "\002\000\002\003\011\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\002\000\002\034\004\000" +
    "\002\034\002\000\002\035\005\000\002\035\002\000\002" +
    "\021\003\000\002\022\006\000\002\022\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\025\003\000\002\025\003\000\002\024\006" +
    "\000\002\036\005\000\002\036\002\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\015\004\000\002\016\006" +
    "\000\002\016\002\000\002\017\007\000\002\020\013\000" +
    "\002\020\012\000\002\020\012\000\002\020\011\000\002" +
    "\020\010\000\002\032\003\000\002\027\014\000\002\031" +
    "\004\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\024\005\020\007\005\021\027\022\013\041" +
    "\016\043\032\045\022\047\014\050\025\001\002\000\004" +
    "\002\227\001\002\000\004\005\226\001\002\000\030\002" +
    "\ufffa\005\ufffa\007\ufffa\021\ufffa\022\ufffa\037\ufffa\041\ufffa" +
    "\043\ufffa\045\ufffa\047\ufffa\050\ufffa\001\002\000\004\035" +
    "\uffe8\001\002\000\004\035\225\001\002\000\004\035\ufff7" +
    "\001\002\000\032\002\uffc7\005\uffc7\007\uffc7\021\uffc7\022" +
    "\uffc7\037\uffc7\041\uffc7\042\220\043\uffc7\045\uffc7\047\uffc7" +
    "\050\uffc7\001\002\000\004\005\217\001\002\000\016\004" +
    "\042\005\045\011\040\016\041\021\027\022\013\001\002" +
    "\000\006\035\uffd7\036\uffd7\001\002\000\016\004\042\005" +
    "\045\011\040\016\041\021\027\022\013\001\002\000\030" +
    "\002\ufffb\005\ufffb\007\ufffb\021\ufffb\022\ufffb\037\ufffb\041" +
    "\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\001\002\000\012" +
    "\015\uffd3\016\210\021\105\022\104\001\002\000\004\035" +
    "\ufff4\001\002\000\004\005\174\001\002\000\030\002\ufff9" +
    "\005\ufff9\007\ufff9\021\ufff9\022\ufff9\037\ufff9\041\ufff9\043" +
    "\ufff9\045\ufff9\047\ufff9\050\ufff9\001\002\000\004\035\ufff6" +
    "\001\002\000\004\005\156\001\002\000\006\035\uffd6\036" +
    "\uffd6\001\002\000\004\005\155\001\002\000\004\035\ufff5" +
    "\001\002\000\030\002\ufff8\005\ufff8\007\ufff8\021\ufff8\022" +
    "\ufff8\037\ufff8\041\ufff8\043\ufff8\045\ufff8\047\ufff8\050\ufff8" +
    "\001\002\000\006\035\037\045\022\001\002\000\004\002" +
    "\uffff\001\002\000\030\002\ufffd\005\020\007\005\021\027" +
    "\022\013\037\ufffd\041\016\043\032\045\022\047\014\050" +
    "\025\001\002\000\006\002\ufffe\037\ufffe\001\002\000\004" +
    "\035\143\001\002\000\020\004\042\005\045\011\040\016" +
    "\041\021\027\022\013\035\044\001\002\000\016\004\042" +
    "\005\045\011\040\016\041\021\027\022\013\001\002\000" +
    "\016\004\042\005\045\011\040\016\041\021\027\022\013" +
    "\001\002\000\046\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040" +
    "\uffdc\001\002\000\046\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\040\uffc0\001\002\000\004\036\135\001\002\000\054\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016\125\017\uffde" +
    "\021\105\022\104\023\uffde\024\uffde\025\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\001\002\000\040\010\060\011\050\012\055\013" +
    "\064\014\053\023\051\024\066\025\052\027\057\030\056" +
    "\031\063\032\065\033\054\034\061\035\062\001\002\000" +
    "\046\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\017\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\001\002" +
    "\000\016\004\042\005\045\011\040\016\041\021\027\022" +
    "\013\001\002\000\016\004\042\005\045\011\040\016\041" +
    "\021\027\022\013\001\002\000\016\004\042\005\045\011" +
    "\040\016\041\021\027\022\013\001\002\000\016\004\042" +
    "\005\045\011\040\016\041\021\027\022\013\001\002\000" +
    "\016\004\042\005\045\011\040\016\041\021\027\022\013" +
    "\001\002\000\016\004\042\005\045\011\040\016\041\021" +
    "\027\022\013\001\002\000\016\004\042\005\045\011\040" +
    "\016\041\021\027\022\013\001\002\000\016\004\042\005" +
    "\045\011\040\016\041\021\027\022\013\001\002\000\016" +
    "\004\042\005\045\011\040\016\041\021\027\022\013\001" +
    "\002\000\016\004\042\005\045\011\040\016\041\021\027" +
    "\022\013\001\002\000\012\005\073\021\027\022\013\036" +
    "\075\001\002\000\016\004\042\005\045\011\040\016\041" +
    "\021\027\022\013\001\002\000\016\004\042\005\045\011" +
    "\040\016\041\021\027\022\013\001\002\000\016\004\042" +
    "\005\045\011\040\016\041\021\027\022\013\001\002\000" +
    "\016\004\042\005\045\011\040\016\041\021\027\022\013" +
    "\001\002\000\046\010\060\011\050\012\055\013\064\014" +
    "\053\017\uffcb\023\uffcb\024\uffcb\025\uffcb\027\057\030\056" +
    "\031\063\032\065\033\054\034\061\035\uffcb\036\uffcb\040" +
    "\uffcb\001\002\000\046\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\017\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\040\uffcf\001\002\000\046\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\027\057" +
    "\030\056\031\063\032\065\033\054\034\061\035\uffe2\036" +
    "\uffe2\040\uffe2\001\002\000\046\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\017\uffd0\023\uffd0\024\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\001\002\000\012\015\uffd3\016\106\021" +
    "\105\022\104\001\002\000\004\036\100\001\002\000\024" +
    "\005\020\007\005\021\027\022\013\041\016\043\032\045" +
    "\022\047\014\050\025\001\002\000\004\037\077\001\002" +
    "\000\030\002\uffc2\005\uffc2\007\uffc2\021\uffc2\022\uffc2\037" +
    "\uffc2\041\uffc2\043\uffc2\045\uffc2\047\uffc2\050\uffc2\001\002" +
    "\000\024\005\020\007\005\021\027\022\013\041\016\043" +
    "\032\045\022\047\014\050\025\001\002\000\004\037\102" +
    "\001\002\000\030\002\uffc4\005\uffc4\007\uffc4\021\uffc4\022" +
    "\uffc4\037\uffc4\041\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4" +
    "\001\002\000\004\015\111\001\002\000\046\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\017\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\040\uffda\001\002\000\046\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\017\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\040\uffdb\001\002\000\016\004" +
    "\042\005\045\011\040\016\041\021\027\022\013\001\002" +
    "\000\040\010\060\011\050\012\055\013\064\014\053\017" +
    "\110\023\051\024\066\025\052\027\057\030\056\031\063" +
    "\032\065\033\054\034\061\001\002\000\004\015\uffd4\001" +
    "\002\000\016\004\042\005\045\011\040\016\041\021\027" +
    "\022\013\001\002\000\042\010\060\011\050\012\055\013" +
    "\064\014\053\023\051\024\066\025\052\027\057\030\056" +
    "\031\063\032\065\033\054\034\061\035\uffd5\036\uffd5\001" +
    "\002\000\046\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\001\002\000\046\010\uffe5\011\uffe5\012\055\013\064\014" +
    "\053\017\uffe5\023\uffe5\024\uffe5\025\uffe5\027\057\030\056" +
    "\031\063\032\065\033\054\034\061\035\uffe5\036\uffe5\040" +
    "\uffe5\001\002\000\046\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\017\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\001\002\000\046\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\040\uffd1\001\002\000\046\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\027" +
    "\057\030\056\031\063\032\065\033\054\034\061\035\uffe3" +
    "\036\uffe3\040\uffe3\001\002\000\046\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\017\uffce\023\uffce\024\uffce\025\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\040\uffce\001\002\000\046\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\017\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\027\057\030\056\031\063\032\065\033\054\034\061" +
    "\035\uffe1\036\uffe1\040\uffe1\001\002\000\046\010\060\011" +
    "\050\012\055\013\064\014\053\017\uffca\023\uffca\024\uffca" +
    "\025\uffca\027\057\030\056\031\063\032\065\033\054\034" +
    "\061\035\uffca\036\uffca\040\uffca\001\002\000\046\010\060" +
    "\011\050\012\055\013\064\014\053\017\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\027\057\030\056\031\063\032\065\033\054" +
    "\034\061\035\uffcc\036\uffcc\040\uffcc\001\002\000\046\010" +
    "\uffe4\011\uffe4\012\055\013\064\014\053\017\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\027\057\030\056\031\063\032\065\033" +
    "\054\034\061\035\uffe4\036\uffe4\040\uffe4\001\002\000\020" +
    "\004\042\005\045\011\040\016\041\017\uffeb\021\027\022" +
    "\013\001\002\000\004\017\134\001\002\000\042\010\060" +
    "\011\050\012\055\013\064\014\053\017\uffe9\023\051\024" +
    "\066\025\052\027\057\030\056\031\063\032\065\033\054" +
    "\034\061\040\130\001\002\000\016\004\042\005\045\011" +
    "\040\016\041\021\027\022\013\001\002\000\004\017\uffec" +
    "\001\002\000\042\010\060\011\050\012\055\013\064\014" +
    "\053\017\uffe9\023\051\024\066\025\052\027\057\030\056" +
    "\031\063\032\065\033\054\034\061\040\130\001\002\000" +
    "\004\017\uffea\001\002\000\046\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\017\uffbd\023\uffbd\024\uffbd\025\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\040\uffbd\001\002\000\024\005\020\007\005\021" +
    "\027\022\013\041\016\043\032\045\022\047\014\050\025" +
    "\001\002\000\004\037\137\001\002\000\030\002\uffc1\005" +
    "\uffc1\007\uffc1\021\uffc1\022\uffc1\037\uffc1\041\uffc1\043\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\001\002\000\040\010\060\011" +
    "\050\012\055\013\064\014\053\017\141\023\051\024\066" +
    "\025\052\027\057\030\056\031\063\032\065\033\054\034" +
    "\061\001\002\000\046\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\040\uffdf\001\002\000\046\010\uffe0\011\uffe0\012\055\013" +
    "\064\014\053\017\uffe0\023\uffe0\024\uffe0\025\uffe0\027\057" +
    "\030\056\031\063\032\065\033\054\034\061\035\uffe0\036" +
    "\uffe0\040\uffe0\001\002\000\016\004\042\005\045\011\040" +
    "\016\041\021\027\022\013\001\002\000\040\010\060\011" +
    "\050\012\055\013\064\014\053\023\051\024\066\025\052" +
    "\027\057\030\056\031\063\032\065\033\054\034\061\035" +
    "\145\001\002\000\012\005\073\021\027\022\013\036\147" +
    "\001\002\000\004\036\152\001\002\000\024\005\020\007" +
    "\005\021\027\022\013\041\016\043\032\045\022\047\014" +
    "\050\025\001\002\000\004\037\151\001\002\000\030\002" +
    "\uffc3\005\uffc3\007\uffc3\021\uffc3\022\uffc3\037\uffc3\041\uffc3" +
    "\043\uffc3\045\uffc3\047\uffc3\050\uffc3\001\002\000\024\005" +
    "\020\007\005\021\027\022\013\041\016\043\032\045\022" +
    "\047\014\050\025\001\002\000\004\037\154\001\002\000" +
    "\030\002\uffc5\005\uffc5\007\uffc5\021\uffc5\022\uffc5\037\uffc5" +
    "\041\uffc5\043\uffc5\045\uffc5\047\uffc5\050\uffc5\001\002\000" +
    "\046\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\017\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\001\002" +
    "\000\004\016\157\001\002\000\006\017\uffef\045\022\001" +
    "\002\000\006\017\uffed\040\170\001\002\000\004\017\162" +
    "\001\002\000\004\020\163\001\002\000\004\006\164\001" +
    "\002\000\004\036\165\001\002\000\024\005\020\007\005" +
    "\021\027\022\013\041\016\043\032\045\022\047\014\050" +
    "\025\001\002\000\004\037\167\001\002\000\030\002\uffbf" +
    "\005\uffbf\007\uffbf\021\uffbf\022\uffbf\037\uffbf\041\uffbf\043" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\001\002\000\004\045\022" +
    "\001\002\000\004\017\ufff0\001\002\000\006\017\uffed\040" +
    "\170\001\002\000\004\017\uffee\001\002\000\006\016\200" +
    "\044\201\001\002\000\012\015\176\017\uffe6\035\uffe6\040" +
    "\uffe6\001\002\000\016\004\042\005\045\011\040\016\041" +
    "\021\027\022\013\001\002\000\044\010\060\011\050\012" +
    "\055\013\064\014\053\017\uffe7\023\051\024\066\025\052" +
    "\027\057\030\056\031\063\032\065\033\054\034\061\035" +
    "\uffe7\040\uffe7\001\002\000\004\004\203\001\002\000\004" +
    "\006\202\001\002\000\012\015\ufff3\017\ufff3\035\ufff3\040" +
    "\ufff3\001\002\000\004\017\ufff2\001\002\000\004\017\205" +
    "\001\002\000\004\044\206\001\002\000\004\006\207\001" +
    "\002\000\012\015\ufff1\017\ufff1\035\ufff1\040\ufff1\001\002" +
    "\000\020\004\042\005\045\011\040\016\041\017\uffeb\021" +
    "\027\022\013\001\002\000\042\010\060\011\050\012\055" +
    "\013\064\014\053\017\110\023\051\024\066\025\052\027" +
    "\057\030\056\031\063\032\065\033\054\034\061\040\130" +
    "\001\002\000\040\010\060\011\050\012\055\013\064\014" +
    "\053\023\051\024\066\025\052\027\057\030\056\031\063" +
    "\032\065\033\054\034\061\036\213\001\002\000\024\005" +
    "\020\007\005\021\027\022\013\041\016\043\032\045\022" +
    "\047\014\050\025\001\002\000\004\037\215\001\002\000" +
    "\032\002\uffc6\005\uffc6\007\uffc6\021\uffc6\022\uffc6\037\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\045\uffc6\047\uffc6\050\uffc6\001" +
    "\002\000\040\010\060\011\050\012\055\013\064\014\053" +
    "\023\051\024\066\025\052\027\057\030\056\031\063\032" +
    "\065\033\054\034\061\035\uffbe\001\002\000\046\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\017\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\040\uffd8\001\002\000\004\036" +
    "\222\001\002\000\030\002\uffc9\005\uffc9\007\uffc9\021\uffc9" +
    "\022\uffc9\037\uffc9\041\uffc9\043\uffc9\045\uffc9\047\uffc9\050" +
    "\uffc9\001\002\000\024\005\020\007\005\021\027\022\013" +
    "\041\016\043\032\045\022\047\014\050\025\001\002\000" +
    "\004\037\224\001\002\000\030\002\uffc8\005\uffc8\007\uffc8" +
    "\021\uffc8\022\uffc8\037\uffc8\041\uffc8\043\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\001\002\000\030\002\ufffc\005\ufffc\007\ufffc" +
    "\021\ufffc\022\ufffc\037\ufffc\041\ufffc\043\ufffc\045\ufffc\047" +
    "\ufffc\050\ufffc\001\002\000\030\002\000\005\000\007\000" +
    "\021\000\022\000\037\000\041\000\043\000\045\000\047" +
    "\000\050\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\042\002\030\006\003\007\033\013\032\014" +
    "\007\015\016\017\011\020\005\021\010\022\006\024\014" +
    "\025\023\027\022\030\020\031\027\033\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\220\001\001\000\002\001\001\000\010\030\042\032\215" +
    "\033\046\001\001\000\002\001\001\000\010\030\042\032" +
    "\211\033\046\001\001\000\002\001\001\000\004\036\102" +
    "\001\001\000\002\001\001\000\004\003\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\035\022\006\001\001\000\002\001\001" +
    "\000\040\002\030\007\033\013\034\014\007\015\016\017" +
    "\011\020\005\021\010\022\006\024\014\025\023\027\022" +
    "\030\020\031\027\033\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\042\032\045\033\046\001\001" +
    "\000\010\030\042\032\141\033\046\001\001\000\010\030" +
    "\042\032\137\033\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\042\032\123\033\046" +
    "\001\001\000\010\030\042\032\122\033\046\001\001\000" +
    "\010\030\042\032\121\033\046\001\001\000\010\030\042" +
    "\032\120\033\046\001\001\000\010\030\042\032\117\033" +
    "\046\001\001\000\010\030\042\032\116\033\046\001\001" +
    "\000\010\030\042\032\115\033\046\001\001\000\010\030" +
    "\042\032\114\033\046\001\001\000\010\030\042\032\113" +
    "\033\046\001\001\000\010\030\042\032\112\033\046\001" +
    "\001\000\010\024\014\025\073\033\025\001\001\000\010" +
    "\030\042\032\071\033\046\001\001\000\010\030\042\032" +
    "\070\033\046\001\001\000\010\030\042\032\067\033\046" +
    "\001\001\000\010\030\042\032\066\033\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\102\001\001\000\002\001\001\000" +
    "\040\002\030\007\033\013\075\014\007\015\016\017\011" +
    "\020\005\021\010\022\006\024\014\025\023\027\022\030" +
    "\020\031\027\033\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\030\007\033\013\100\014\007\015" +
    "\016\017\011\020\005\021\010\022\006\024\014\025\023" +
    "\027\022\030\020\031\027\033\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\042\032\106\033\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\042" +
    "\032\111\033\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\042\032\126\033\046\034\125\001\001\000\002\001" +
    "\001\000\004\035\130\001\001\000\010\030\042\032\131" +
    "\033\046\001\001\000\002\001\001\000\004\035\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\030" +
    "\007\033\013\135\014\007\015\016\017\011\020\005\021" +
    "\010\022\006\024\014\025\023\027\022\030\020\031\027" +
    "\033\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\042\032\143\033\046\001\001\000\002\001\001\000" +
    "\010\024\014\025\145\033\025\001\001\000\002\001\001" +
    "\000\040\002\030\007\033\013\147\014\007\015\016\017" +
    "\011\020\005\021\010\022\006\024\014\025\023\027\022" +
    "\030\020\031\027\033\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\030\007\033\013\152\014\007" +
    "\015\016\017\011\020\005\021\010\022\006\024\014\025" +
    "\023\027\022\030\020\031\027\033\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\160\022\157\001\001\000\004\005\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\030\007\033\013\165" +
    "\014\007\015\016\017\011\020\005\021\010\022\006\024" +
    "\014\025\023\027\022\030\020\031\027\033\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\171\001" +
    "\001\000\002\001\001\000\004\005\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\042\032\176\033\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\042\032\210\033" +
    "\046\034\125\001\001\000\004\035\130\001\001\000\002" +
    "\001\001\000\040\002\030\007\033\013\213\014\007\015" +
    "\016\017\011\020\005\021\010\022\006\024\014\025\023" +
    "\027\022\030\020\031\027\033\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\030\007" +
    "\033\013\222\014\007\015\016\017\011\020\005\021\010" +
    "\022\006\024\014\025\023\027\022\030\020\031\027\033" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;

  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RootNode start_val = (RootNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORT_DEFINITION ::= IMPORT ID 
            {
              EstructuraControl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ImportNode(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORT_DEFINITION",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ROOT ::= BLOCKS 
            {
              RootNode RESULT =null;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RootNode(bloques.toArray(new EstructuraControl[0])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCKS ::= BLOCK BLOCKS 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              bloques.addFirst(block); 
              RESULT = bloques; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCKS ::= BLOCK 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              ArrayDeque<EstructuraControl> newDeque = new ArrayDeque<>(); 
              newDeque.addFirst(block); 
              RESULT = newDeque;
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= COMANDOS Endline 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueComando block = (BloqueComando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= IF_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOCK ::= FOR_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOCK ::= FUNC_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOCK ::= IMPORT_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMANDOS ::= VAR_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMANDOS ::= ASSIGN_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMANDOS ::= FUNC_RETURN 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMANDOS ::= FUNC_CALL 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SYM_OBTAIN ::= ID DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, 1, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 if (size.getType() != UnderlyingSymbolType.INT) {report_error("Array creation error", null);}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SYM_OBTAIN ::= ID OBracket VALUE NT$0 CBracket DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (GrapeSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, size.getValue(), 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SYM_ARGS ::= VAR_DEFINITION SYM_ARGS_P 
            {
              VarNode[] RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarNode arg = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<VarNode> stack = (Stack<VarNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(arg); RESULT = stack.toArray(new VarNode[0]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SYM_ARGS ::= 
            {
              VarNode[] RESULT =null;
		RESULT = new VarNode[0];
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SYM_ARGS_P ::= COMA VAR_DEFINITION SYM_ARGS_P 
            {
              Stack<VarNode> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarNode arg = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<VarNode> stack = (Stack<VarNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(arg); RESULT = stack;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS_P",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SYM_ARGS_P ::= 
            {
              Stack<VarNode> RESULT =null;
		RESULT = new Stack<VarNode>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS_P",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_ARRAY ::= EXPRESION EXPRESION_ARRAY_P 
            {
              Expresion[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> stack = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(e1); RESULT = stack.toArray(new Expresion[0]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION_ARRAY ::= 
            {
              Expresion[] RESULT =null;
		RESULT = new Expresion[0];
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION_ARRAY_P ::= COMA EXPRESION EXPRESION_ARRAY_P 
            {
              Stack<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> stack = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(e1); RESULT = stack;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY_P",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION_ARRAY_P ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<Node>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY_P",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAR_DEFINITION_GROUP ::= VAR_DEFINITION 
            {
              VarNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN ASSIGN EXPRESION 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  RESULT = new VarNode(s, val);
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

  RESULT = new VarNode(s, null); 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MUL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(new ValueNode(new ValueContainer(0,UnderlyingSymbolType.INT)), e1, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= OBracket EXPRESION CBracket 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddressNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= VALUE 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer e1 = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESPECIAL_EXPRESIONS ::= ID INCREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESPECIAL_EXPRESIONS ::= ID DECREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESPECIAL_EXPRESIONS ::= INCREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ESPECIAL_EXPRESIONS ::= DECREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASSIGN_DEFINITION_GROUP ::= ASSIGN_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASSIGN_DEFINITION_GROUP ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGN_DEFINITION ::= ID ARRAY_INDEX ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node index = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignNode(e1, index, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAY_INDEX ::= OBracket EXPRESION CBracket 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_INDEX",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRAY_INDEX ::= 
            {
              Node RESULT =null;
		 RESULT = new ValueNode(new ValueContainer(0, UnderlyingSymbolType.INT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_INDEX",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION NEQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION GT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION LT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION GE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION LE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.XOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_DEFINITION ::= IF_STATEMENT ELSE_STATEMENT 
            {
              EstructuraControl RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfNode e1 = (IfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> e2 = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setElseBody(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE_STATEMENT ::= ELSE OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> elseBlock = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = elseBlock; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE_STATEMENT ::= 
            {
              ArrayDeque<EstructuraControl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_STATEMENT ::= IF EXPRESION OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              IfNode RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfNode(conditional,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR_DEFINITION ::= FOR Endline Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,null,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= FUNC_CALL 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNC_DEFINITION ::= FUNC ID OBracket SYM_ARGS CBracket ARROW VAR_TYPE OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarNode[] params = (VarNode[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  FunctionSymbol f = new FunctionSymbol(name, params, ASTExplorer.makeNewTmpVar(tipe)); // Crear funcion con su tipo de retorno especificado
  RESULT = new FuncNode(f,body);  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DEFINITION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNC_RETURN ::= RETURN EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReturnFuncNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_RETURN",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNC_CALL ::= ID OBracket EXPRESION_ARRAY CBracket 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion[] params = (Expresion[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  RESULT = new FuncCallNode(name,params);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
