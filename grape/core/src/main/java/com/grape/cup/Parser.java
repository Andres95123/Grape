
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.*;
import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Definiciones.*;
import java.util.Stack;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\010\003\000\002\011" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\010\000\002\004\006\000\002" +
    "\005\005\000\002\013\002\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\006\011\000\002\006\007\000" +
    "\002\007\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\014\005\013\010\016\011\005\012\010\016" +
    "\014\001\002\000\004\002\000\001\002\000\004\005\117" +
    "\001\002\000\004\040\ufff9\001\002\000\004\040\115\001" +
    "\002\000\044\004\032\005\026\013\ufff4\020\ufff4\021\030" +
    "\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\001\002" +
    "\000\004\040\ufffa\001\002\000\004\002\105\001\002\000" +
    "\004\027\103\001\002\000\004\036\071\001\002\000\004" +
    "\040\ufffd\001\002\000\004\005\022\001\002\000\004\040" +
    "\ufffb\001\002\000\004\040\ufffc\001\002\000\004\040\ufff8" +
    "\001\002\000\004\007\023\001\002\000\004\006\024\001" +
    "\002\000\004\027\025\001\002\000\044\004\032\005\026" +
    "\020\ufff4\021\030\022\ufff4\023\034\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\033\040\ufff4\001\002\000\042\013\uffe7\020\uffe7\021" +
    "\067\022\uffe7\023\070\024\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040" +
    "\uffe7\001\002\000\036\013\uffec\020\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\037\uffec\040\uffec\001\002\000\004\005\066" +
    "\001\002\000\032\020\044\022\037\024\041\025\050\026" +
    "\042\030\052\031\051\032\046\033\040\034\045\035\043" +
    "\040\ufff7\001\002\000\036\013\ufff3\020\ufff3\022\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\037\ufff3\040\ufff3\001\002\000\044\004" +
    "\032\005\026\020\ufff4\021\030\022\ufff4\023\034\024\ufff4" +
    "\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\033\037\ufff4\001\002\000\004\005\035" +
    "\001\002\000\036\013\uffea\020\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\037\uffea\040\uffea\001\002\000\032\020\044\022" +
    "\037\024\041\025\050\026\042\030\052\031\051\032\046" +
    "\033\040\034\045\035\043\037\047\001\002\000\050\004" +
    "\032\005\026\013\ufff4\020\ufff4\021\030\022\ufff4\023\034" +
    "\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\033\037\ufff4\040\ufff4\001\002" +
    "\000\050\004\032\005\026\013\ufff4\020\ufff4\021\030\022" +
    "\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\037\ufff4\040" +
    "\ufff4\001\002\000\050\004\032\005\026\013\ufff4\020\ufff4" +
    "\021\030\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033" +
    "\037\ufff4\040\ufff4\001\002\000\050\004\032\005\026\013" +
    "\ufff4\020\ufff4\021\030\022\ufff4\023\034\024\ufff4\025\ufff4" +
    "\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\033\037\ufff4\040\ufff4\001\002\000\050\004\032" +
    "\005\026\013\ufff4\020\ufff4\021\030\022\ufff4\023\034\024" +
    "\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\033\037\ufff4\040\ufff4\001\002\000" +
    "\050\004\032\005\026\013\ufff4\020\ufff4\021\030\022\ufff4" +
    "\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\037\ufff4\040\ufff4" +
    "\001\002\000\050\004\032\005\026\013\ufff4\020\ufff4\021" +
    "\030\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\037" +
    "\ufff4\040\ufff4\001\002\000\050\004\032\005\026\013\ufff4" +
    "\020\ufff4\021\030\022\ufff4\023\034\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\033\037\ufff4\040\ufff4\001\002\000\036\013\uffed\020" +
    "\uffed\022\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed\001" +
    "\002\000\050\004\032\005\026\013\ufff4\020\ufff4\021\030" +
    "\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\037\ufff4" +
    "\040\ufff4\001\002\000\050\004\032\005\026\013\ufff4\020" +
    "\ufff4\021\030\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\033\037\ufff4\040\ufff4\001\002\000\050\004\032\005\026" +
    "\013\ufff4\020\ufff4\021\030\022\ufff4\023\034\024\ufff4\025" +
    "\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\033\037\ufff4\040\ufff4\001\002\000\036\013" +
    "\uffe6\020\044\022\037\024\041\025\050\026\042\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\040" +
    "\uffe6\001\002\000\036\013\uffe5\020\044\022\037\024\041" +
    "\025\050\026\042\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\037\uffe5\040\uffe5\001\002\000\036\013\uffef" +
    "\020\uffef\022\uffef\024\uffef\025\uffef\026\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\040\uffef" +
    "\001\002\000\036\013\uffe4\020\044\022\037\024\041\025" +
    "\050\026\042\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\037\uffe4\040\uffe4\001\002\000\036\013\uffe2\020" +
    "\044\022\037\024\041\025\050\026\042\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\001" +
    "\002\000\036\013\ufff2\020\ufff2\022\ufff2\024\041\025\050" +
    "\026\042\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\037\ufff2\040\ufff2\001\002\000\036\013\uffe1\020\044" +
    "\022\037\024\041\025\050\026\042\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\036\013\uffee\020\uffee\022\uffee\024\uffee\025\uffee\026" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\037\uffee\040\uffee\001\002\000\036\013\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\001\002\000" +
    "\036\013\uffe3\020\044\022\037\024\041\025\050\026\042" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\001\002\000\036\013\ufff1\020\ufff1\022\ufff1" +
    "\024\041\025\050\026\042\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\001\002\000\036" +
    "\013\uffeb\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb" +
    "\040\uffeb\001\002\000\036\013\uffe9\020\uffe9\022\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\037\uffe9\040\uffe9\001\002\000\036\013" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\040" +
    "\uffe8\001\002\000\006\010\016\011\005\001\002\000\004" +
    "\040\073\001\002\000\044\004\032\005\026\020\ufff4\021" +
    "\030\022\ufff4\023\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\033\040" +
    "\ufff4\001\002\000\032\020\044\022\037\024\041\025\050" +
    "\026\042\030\052\031\051\032\046\033\040\034\045\035" +
    "\043\040\075\001\002\000\004\005\013\001\002\000\004" +
    "\037\077\001\002\000\004\013\100\001\002\000\014\005" +
    "\013\010\016\011\005\012\010\016\014\001\002\000\004" +
    "\017\102\001\002\000\004\040\uffde\001\002\000\046\004" +
    "\032\005\026\020\ufff4\021\030\022\ufff4\023\034\024\ufff4" +
    "\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\033\037\ufff4\040\ufff4\001\002\000\034" +
    "\020\044\022\037\024\041\025\050\026\042\030\052\031" +
    "\051\032\046\033\040\034\045\035\043\037\ufff5\040\ufff5" +
    "\001\002\000\004\002\001\001\002\000\032\013\107\020" +
    "\044\022\037\024\041\025\050\026\042\030\052\031\051" +
    "\032\046\033\040\034\045\035\043\001\002\000\014\005" +
    "\013\010\016\011\005\012\010\016\014\001\002\000\006" +
    "\014\111\015\112\001\002\000\014\005\013\010\016\011" +
    "\005\012\010\016\014\001\002\000\004\040\uffdf\001\002" +
    "\000\004\015\114\001\002\000\004\040\uffe0\001\002\000" +
    "\024\002\uffff\005\013\010\016\011\005\012\010\014\uffff" +
    "\015\uffff\016\014\017\uffff\001\002\000\012\002\ufffe\014" +
    "\ufffe\015\ufffe\017\ufffe\001\002\000\004\027\120\001\002" +
    "\000\044\004\032\005\026\020\ufff4\021\030\022\ufff4\023" +
    "\034\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\033\040\ufff4\001\002\000" +
    "\032\020\044\022\037\024\041\025\050\026\042\030\052" +
    "\031\051\032\046\033\040\034\045\035\043\040\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\024\002\014\003\005\004\020\005\017\006" +
    "\016\007\010\010\011\011\003\012\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\105\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\030\014\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\035\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\064\014\026\001\001\000\006\013\063" +
    "\014\026\001\001\000\006\013\062\014\026\001\001\000" +
    "\006\013\061\014\026\001\001\000\006\013\060\014\026" +
    "\001\001\000\006\013\057\014\026\001\001\000\006\013" +
    "\056\014\026\001\001\000\006\013\055\014\026\001\001" +
    "\000\002\001\001\000\006\013\054\014\026\001\001\000" +
    "\006\013\053\014\026\001\001\000\006\013\052\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\071\003\005\004" +
    "\020\001\001\000\002\001\001\000\006\013\073\014\026" +
    "\001\001\000\002\001\001\000\004\005\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\014\003\005" +
    "\004\020\005\017\006\016\007\010\011\100\012\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\103" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\014\003\005\004\020\005\017" +
    "\006\016\007\010\011\107\012\006\001\001\000\002\001" +
    "\001\000\022\002\014\003\005\004\020\005\017\006\016" +
    "\007\010\011\112\012\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\014\003\005" +
    "\004\020\005\017\006\016\007\010\011\115\012\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\120" +
    "\014\026\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;
  
  // Estructuras de datos para almacenar variables
  private HashMap<String, VariableNode> variables = new HashMap<String, VariableNode>();


  // Funciones propias
  public VariableNode addVar(VariableNode var) {

    if (variables.containsKey(var.getName())) {
      report_error("Variable ya declarada", var.getName());
    }

    variables.put(var.getName(), var);

    return var;
  }


  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CODESTART EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CODESTART ::= BLOCK 
            {
              ProgramNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockNode e1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODESTART",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= COMANDOS Endline 
            {
              BlockNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= COMANDOS Endline BLOCK 
            {
              BlockNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockNode e2 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BlockNode(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMANDOS ::= VAR_DEFINITION_GROUP 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMANDOS ::= ASSIGN_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMANDOS ::= IF_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMANDOS ::= FOR_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VAR_DEFINITION_GROUP ::= VAR_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAR_DEFINITION_GROUP ::= INFER_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAR_DEFINITION ::= VAR_INVOKER ID DETERMINE VAR_TYPE ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo tipe = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  if (!val.isType(tipe)) {
    report_error("Tipo de variable no coincide con el valor asignado",name);
  } 

  RESULT = addVar(new VariableNode(name, val, tipe));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INFER_DEFINITION ::= INFER_INVOKER ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  RESULT = addVar(new VariableNode(name, val, val.getType()));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INFER_DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASSIGN_DEFINITION ::= ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 

  if (!val.isType(variables.get(id).getType())) {
    report_error("Tipo de variable no coincide con el valor asignado",id);
  }

  RESULT = new AssignNode(variables.get(id),val);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= 
            {
              DefineNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= VALUE 
            {
              DefineNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer val = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueNode(val.getValue(),val.getType()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.MUL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= OBracket EXPRESION CBracket 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= ESPECIAL_EXPRESIONS 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESPECIAL_EXPRESIONS ::= DOUBLE_PLUS ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new ExpresionNode(variables.get(id),new ValueNode(1,Tipo.INT),Operadores.ADD);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESPECIAL_EXPRESIONS ::= DOUBLE_MINUS ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new ExpresionNode(variables.get(id),new ValueNode(1,Tipo.INT),Operadores.SUB);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESPECIAL_EXPRESIONS ::= ID DOUBLE_PLUS 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new IncrementNode(variables.get(id),Comandos.ADD);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESPECIAL_EXPRESIONS ::= ID DOUBLE_MINUS 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new IncrementNode(variables.get(id),Comandos.SUB);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESPECIAL_EXPRESIONS ::= ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = variables.get(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION LT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION GT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION LE EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION GE EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION NEQ EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_DEFINITION ::= IF_INVOKER EXPRESION THEN_INVOKER BLOCK ELSE_INVOKER BLOCK ENDIF_INVOKER 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int com1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BlockNode com1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int com2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode com2 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new IfNode(exp1,com1,com2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF_DEFINITION ::= IF_INVOKER EXPRESION THEN_INVOKER BLOCK ENDIF_INVOKER 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int com1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode com1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new IfNode(exp1,com1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FOR_DEFINITION ::= FOR_INVOKER OBracket VAR_DEFINITION_GROUP Endline EXPRESION Endline ASSIGN_DEFINITION CBracket THEN_INVOKER BLOCK ENDFOR_INVOKER 
            {
              Node RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Node instance = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DefineNode condition = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode body = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new ForNode(instance,condition,body,increment);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
