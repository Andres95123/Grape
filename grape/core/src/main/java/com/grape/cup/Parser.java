
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.*;
import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Estructuras.*;
import com.grape.utils.AST.Base.*;
import com.grape.Tables.*;
import com.grape.Symbols.*;
import java.util.Stack;
import java.util.HashMap;
import java.util.ArrayDeque;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\005\003\000\002\012" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\002\005\000\002\035\002\000\002\002\011\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\002" +
    "\000\002\033\004\000\002\033\002\000\002\034\005\000" +
    "\002\034\002\000\002\020\003\000\002\021\006\000\002" +
    "\021\004\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\024\003\000\002\024" +
    "\003\000\002\023\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\014\004\000\002\015\006\000\002\015" +
    "\002\000\002\016\007\000\002\017\013\000\002\017\012" +
    "\000\002\017\012\000\002\017\011\000\002\017\010\000" +
    "\002\031\003\000\002\026\014\000\002\030\004\000\002" +
    "\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\022\005\017\020\026\021\012\040\016\042" +
    "\030\044\021\046\013\047\024\001\002\000\004\002\216" +
    "\001\002\000\026\002\ufffb\005\ufffb\020\ufffb\021\ufffb\036" +
    "\ufffb\040\ufffb\042\ufffb\044\ufffb\046\ufffb\047\ufffb\001\002" +
    "\000\004\034\uffea\001\002\000\004\034\215\001\002\000" +
    "\004\034\ufff9\001\002\000\030\002\uffcb\005\uffcb\020\uffcb" +
    "\021\uffcb\036\uffcb\040\uffcb\041\210\042\uffcb\044\uffcb\046" +
    "\uffcb\047\uffcb\001\002\000\004\005\207\001\002\000\016" +
    "\004\040\005\043\010\036\015\037\020\026\021\012\001" +
    "\002\000\006\034\uffd9\035\uffd9\001\002\000\026\002\ufffc" +
    "\005\ufffc\020\ufffc\021\ufffc\036\ufffc\040\ufffc\042\ufffc\044" +
    "\ufffc\046\ufffc\047\ufffc\001\002\000\016\004\040\005\043" +
    "\010\036\015\037\020\026\021\012\001\002\000\012\014" +
    "\103\015\117\020\102\021\101\001\002\000\004\034\ufff6" +
    "\001\002\000\004\005\166\001\002\000\026\002\ufffa\005" +
    "\ufffa\020\ufffa\021\ufffa\036\ufffa\040\ufffa\042\ufffa\044\ufffa" +
    "\046\ufffa\047\ufffa\001\002\000\004\034\ufff8\001\002\000" +
    "\004\005\150\001\002\000\006\034\uffd8\035\uffd8\001\002" +
    "\000\004\005\147\001\002\000\004\034\ufff7\001\002\000" +
    "\006\034\035\044\021\001\002\000\004\002\000\001\002" +
    "\000\026\002\ufffe\005\017\020\026\021\012\036\ufffe\040" +
    "\016\042\030\044\021\046\013\047\024\001\002\000\006" +
    "\002\uffff\036\uffff\001\002\000\004\034\135\001\002\000" +
    "\020\004\040\005\043\010\036\015\037\020\026\021\012" +
    "\034\042\001\002\000\016\004\040\005\043\010\036\015" +
    "\037\020\026\021\012\001\002\000\016\004\040\005\043" +
    "\010\036\015\037\020\026\021\012\001\002\000\046\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\016\uffde\022\uffde" +
    "\023\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\037\uffde\001\002\000\046" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\016\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\001\002\000" +
    "\004\035\127\001\002\000\054\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\015\117\016\uffe0\020\102\021\101\022" +
    "\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\001\002\000" +
    "\040\007\056\010\047\011\052\012\061\013\053\022\046" +
    "\023\064\024\050\026\055\027\054\030\062\031\063\032" +
    "\051\033\057\034\060\001\002\000\046\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\016\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\037\uffdf\001\002\000\016\004\040\005" +
    "\043\010\036\015\037\020\026\021\012\001\002\000\016" +
    "\004\040\005\043\010\036\015\037\020\026\021\012\001" +
    "\002\000\016\004\040\005\043\010\036\015\037\020\026" +
    "\021\012\001\002\000\016\004\040\005\043\010\036\015" +
    "\037\020\026\021\012\001\002\000\016\004\040\005\043" +
    "\010\036\015\037\020\026\021\012\001\002\000\016\004" +
    "\040\005\043\010\036\015\037\020\026\021\012\001\002" +
    "\000\016\004\040\005\043\010\036\015\037\020\026\021" +
    "\012\001\002\000\016\004\040\005\043\010\036\015\037" +
    "\020\026\021\012\001\002\000\016\004\040\005\043\010" +
    "\036\015\037\020\026\021\012\001\002\000\016\004\040" +
    "\005\043\010\036\015\037\020\026\021\012\001\002\000" +
    "\012\005\071\020\026\021\012\035\073\001\002\000\016" +
    "\004\040\005\043\010\036\015\037\020\026\021\012\001" +
    "\002\000\016\004\040\005\043\010\036\015\037\020\026" +
    "\021\012\001\002\000\016\004\040\005\043\010\036\015" +
    "\037\020\026\021\012\001\002\000\016\004\040\005\043" +
    "\010\036\015\037\020\026\021\012\001\002\000\046\007" +
    "\056\010\047\011\052\012\061\013\053\016\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\026\055\027\054\030\062\031\063\032" +
    "\051\033\057\034\uffcf\035\uffcf\037\uffcf\001\002\000\046" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\001\002\000" +
    "\046\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\001\002" +
    "\000\046\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\016" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\026\055\027\054\030\062" +
    "\031\063\032\051\033\057\034\uffe4\035\uffe4\037\uffe4\001" +
    "\002\000\010\014\103\020\102\021\101\001\002\000\004" +
    "\035\076\001\002\000\022\005\017\020\026\021\012\040" +
    "\016\042\030\044\021\046\013\047\024\001\002\000\004" +
    "\036\075\001\002\000\026\002\uffc6\005\uffc6\020\uffc6\021" +
    "\uffc6\036\uffc6\040\uffc6\042\uffc6\044\uffc6\046\uffc6\047\uffc6" +
    "\001\002\000\022\005\017\020\026\021\012\040\016\042" +
    "\030\044\021\046\013\047\024\001\002\000\004\036\100" +
    "\001\002\000\026\002\uffc8\005\uffc8\020\uffc8\021\uffc8\036" +
    "\uffc8\040\uffc8\042\uffc8\044\uffc8\046\uffc8\047\uffc8\001\002" +
    "\000\046\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\016" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\001" +
    "\002\000\046\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\016\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd" +
    "\001\002\000\016\004\040\005\043\010\036\015\037\020" +
    "\026\021\012\001\002\000\042\007\056\010\047\011\052" +
    "\012\061\013\053\022\046\023\064\024\050\026\055\027" +
    "\054\030\062\031\063\032\051\033\057\034\uffd7\035\uffd7" +
    "\001\002\000\046\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\016\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\001\002\000\046\007\uffe7\010\uffe7\011\052\012\061" +
    "\013\053\016\uffe7\022\uffe7\023\uffe7\024\uffe7\026\055\027" +
    "\054\030\062\031\063\032\051\033\057\034\uffe7\035\uffe7" +
    "\037\uffe7\001\002\000\046\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\016\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\037\uffd6\001\002\000\046\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\016\uffd5\022\uffd5\023\uffd5\024\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\037\uffd5\001\002\000\046\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\016\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\026\055\027\054\030\062\031\063\032\051\033\057\034" +
    "\uffe3\035\uffe3\037\uffe3\001\002\000\046\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\016\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\026\055\027\054\030\062\031\063\032\051\033\057" +
    "\034\uffe5\035\uffe5\037\uffe5\001\002\000\046\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\016\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\037\uffd2\001\002\000\046\007\056" +
    "\010\047\011\052\012\061\013\053\016\uffce\022\uffce\023" +
    "\uffce\024\uffce\026\055\027\054\030\062\031\063\032\051" +
    "\033\057\034\uffce\035\uffce\037\uffce\001\002\000\046\007" +
    "\uffe6\010\uffe6\011\052\012\061\013\053\016\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\026\055\027\054\030\062\031\063\032" +
    "\051\033\057\034\uffe6\035\uffe6\037\uffe6\001\002\000\046" +
    "\007\056\010\047\011\052\012\061\013\053\016\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\055\027\054\030\062\031\063" +
    "\032\051\033\057\034\uffd0\035\uffd0\037\uffd0\001\002\000" +
    "\020\004\040\005\043\010\036\015\037\016\uffed\020\026" +
    "\021\012\001\002\000\004\016\126\001\002\000\042\007" +
    "\056\010\047\011\052\012\061\013\053\016\uffeb\022\046" +
    "\023\064\024\050\026\055\027\054\030\062\031\063\032" +
    "\051\033\057\037\122\001\002\000\016\004\040\005\043" +
    "\010\036\015\037\020\026\021\012\001\002\000\004\016" +
    "\uffee\001\002\000\042\007\056\010\047\011\052\012\061" +
    "\013\053\016\uffeb\022\046\023\064\024\050\026\055\027" +
    "\054\030\062\031\063\032\051\033\057\037\122\001\002" +
    "\000\004\016\uffec\001\002\000\046\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\016\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\037\uffc1\001\002\000\022\005\017\020\026" +
    "\021\012\040\016\042\030\044\021\046\013\047\024\001" +
    "\002\000\004\036\131\001\002\000\026\002\uffc5\005\uffc5" +
    "\020\uffc5\021\uffc5\036\uffc5\040\uffc5\042\uffc5\044\uffc5\046" +
    "\uffc5\047\uffc5\001\002\000\040\007\056\010\047\011\052" +
    "\012\061\013\053\016\133\022\046\023\064\024\050\026" +
    "\055\027\054\030\062\031\063\032\051\033\057\001\002" +
    "\000\046\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\016" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\001" +
    "\002\000\046\007\uffe2\010\uffe2\011\052\012\061\013\053" +
    "\016\uffe2\022\uffe2\023\uffe2\024\uffe2\026\055\027\054\030" +
    "\062\031\063\032\051\033\057\034\uffe2\035\uffe2\037\uffe2" +
    "\001\002\000\016\004\040\005\043\010\036\015\037\020" +
    "\026\021\012\001\002\000\040\007\056\010\047\011\052" +
    "\012\061\013\053\022\046\023\064\024\050\026\055\027" +
    "\054\030\062\031\063\032\051\033\057\034\137\001\002" +
    "\000\012\005\071\020\026\021\012\035\141\001\002\000" +
    "\004\035\144\001\002\000\022\005\017\020\026\021\012" +
    "\040\016\042\030\044\021\046\013\047\024\001\002\000" +
    "\004\036\143\001\002\000\026\002\uffc7\005\uffc7\020\uffc7" +
    "\021\uffc7\036\uffc7\040\uffc7\042\uffc7\044\uffc7\046\uffc7\047" +
    "\uffc7\001\002\000\022\005\017\020\026\021\012\040\016" +
    "\042\030\044\021\046\013\047\024\001\002\000\004\036" +
    "\146\001\002\000\026\002\uffc9\005\uffc9\020\uffc9\021\uffc9" +
    "\036\uffc9\040\uffc9\042\uffc9\044\uffc9\046\uffc9\047\uffc9\001" +
    "\002\000\046\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\016\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb" +
    "\001\002\000\004\015\151\001\002\000\006\016\ufff1\044" +
    "\021\001\002\000\006\016\uffef\037\162\001\002\000\004" +
    "\016\154\001\002\000\004\017\155\001\002\000\004\006" +
    "\156\001\002\000\004\035\157\001\002\000\022\005\017" +
    "\020\026\021\012\040\016\042\030\044\021\046\013\047" +
    "\024\001\002\000\004\036\161\001\002\000\026\002\uffc3" +
    "\005\uffc3\020\uffc3\021\uffc3\036\uffc3\040\uffc3\042\uffc3\044" +
    "\uffc3\046\uffc3\047\uffc3\001\002\000\004\044\021\001\002" +
    "\000\004\016\ufff2\001\002\000\006\016\uffef\037\162\001" +
    "\002\000\004\016\ufff0\001\002\000\006\015\172\043\173" +
    "\001\002\000\012\014\170\016\uffe8\034\uffe8\037\uffe8\001" +
    "\002\000\016\004\040\005\043\010\036\015\037\020\026" +
    "\021\012\001\002\000\044\007\056\010\047\011\052\012" +
    "\061\013\053\016\uffe9\022\046\023\064\024\050\026\055" +
    "\027\054\030\062\031\063\032\051\033\057\034\uffe9\037" +
    "\uffe9\001\002\000\004\004\175\001\002\000\004\006\174" +
    "\001\002\000\012\014\ufff5\016\ufff5\034\ufff5\037\ufff5\001" +
    "\002\000\004\016\ufff4\001\002\000\004\016\177\001\002" +
    "\000\004\043\200\001\002\000\004\006\201\001\002\000" +
    "\012\014\ufff3\016\ufff3\034\ufff3\037\ufff3\001\002\000\040" +
    "\007\056\010\047\011\052\012\061\013\053\022\046\023" +
    "\064\024\050\026\055\027\054\030\062\031\063\032\051" +
    "\033\057\035\203\001\002\000\022\005\017\020\026\021" +
    "\012\040\016\042\030\044\021\046\013\047\024\001\002" +
    "\000\004\036\205\001\002\000\030\002\uffca\005\uffca\020" +
    "\uffca\021\uffca\036\uffca\040\uffca\041\uffca\042\uffca\044\uffca" +
    "\046\uffca\047\uffca\001\002\000\040\007\056\010\047\011" +
    "\052\012\061\013\053\022\046\023\064\024\050\026\055" +
    "\027\054\030\062\031\063\032\051\033\057\034\uffc2\001" +
    "\002\000\046\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\016\uffda\022\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda" +
    "\001\002\000\004\035\212\001\002\000\026\002\uffcd\005" +
    "\uffcd\020\uffcd\021\uffcd\036\uffcd\040\uffcd\042\uffcd\044\uffcd" +
    "\046\uffcd\047\uffcd\001\002\000\022\005\017\020\026\021" +
    "\012\040\016\042\030\044\021\046\013\047\024\001\002" +
    "\000\004\036\214\001\002\000\026\002\uffcc\005\uffcc\020" +
    "\uffcc\021\uffcc\036\uffcc\040\uffcc\042\uffcc\044\uffcc\046\uffcc" +
    "\047\uffcc\001\002\000\026\002\ufffd\005\ufffd\020\ufffd\021" +
    "\ufffd\036\ufffd\040\ufffd\042\ufffd\044\ufffd\046\ufffd\047\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\040\005\003\006\031\012\030\013\006\014" +
    "\014\016\010\017\004\020\007\021\005\023\013\024\022" +
    "\026\021\027\017\030\026\032\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\210\001\001\000\002\001" +
    "\001\000\010\027\040\031\205\032\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\040\031\201\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\033\021\005\001\001\000\002\001" +
    "\001\000\036\006\031\012\032\013\006\014\014\016\010" +
    "\017\004\020\007\021\005\023\013\024\022\026\021\027" +
    "\017\030\026\032\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\040\031\043\032\044\001\001\000" +
    "\010\027\040\031\133\032\044\001\001\000\010\027\040" +
    "\031\131\032\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\040\031\115\032\044\001" +
    "\001\000\010\027\040\031\114\032\044\001\001\000\010" +
    "\027\040\031\113\032\044\001\001\000\010\027\040\031" +
    "\112\032\044\001\001\000\010\027\040\031\111\032\044" +
    "\001\001\000\010\027\040\031\110\032\044\001\001\000" +
    "\010\027\040\031\107\032\044\001\001\000\010\027\040" +
    "\031\106\032\044\001\001\000\010\027\040\031\105\032" +
    "\044\001\001\000\010\027\040\031\104\032\044\001\001" +
    "\000\010\023\013\024\071\032\024\001\001\000\010\027" +
    "\040\031\067\032\044\001\001\000\010\027\040\031\066" +
    "\032\044\001\001\000\010\027\040\031\065\032\044\001" +
    "\001\000\010\027\040\031\064\032\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\031" +
    "\012\073\013\006\014\014\016\010\017\004\020\007\021" +
    "\005\023\013\024\022\026\021\027\017\030\026\032\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\031\012\076\013\006\014\014\016\010\017\004\020\007" +
    "\021\005\023\013\024\022\026\021\027\017\030\026\032" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\040\031\103\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\040\031" +
    "\120\032\044\033\117\001\001\000\002\001\001\000\004" +
    "\034\122\001\001\000\010\027\040\031\123\032\044\001" +
    "\001\000\002\001\001\000\004\034\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\031\012\127\013" +
    "\006\014\014\016\010\017\004\020\007\021\005\023\013" +
    "\024\022\026\021\027\017\030\026\032\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\040\031\135\032" +
    "\044\001\001\000\002\001\001\000\010\023\013\024\137" +
    "\032\024\001\001\000\002\001\001\000\036\006\031\012" +
    "\141\013\006\014\014\016\010\017\004\020\007\021\005" +
    "\023\013\024\022\026\021\027\017\030\026\032\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\031" +
    "\012\144\013\006\014\014\016\010\017\004\020\007\021" +
    "\005\023\013\024\022\026\021\027\017\030\026\032\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\152\021\151\001\001" +
    "\000\004\004\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\031" +
    "\012\157\013\006\014\014\016\010\017\004\020\007\021" +
    "\005\023\013\024\022\026\021\027\017\030\026\032\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\163\001\001\000\002\001\001\000\004\004\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\040\031\170\032\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\031\012\203\013\006\014\014\016\010\017\004" +
    "\020\007\021\005\023\013\024\022\026\021\027\017\030" +
    "\026\032\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\031\012\212\013\006\014\014" +
    "\016\010\017\004\020\007\021\005\023\013\024\022\026" +
    "\021\027\017\030\026\032\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;

  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RootNode start_val = (RootNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= BLOCKS 
            {
              RootNode RESULT =null;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RootNode(bloques.toArray(new EstructuraControl[0])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCKS ::= BLOCK BLOCKS 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloquesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloquesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> bloques = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              bloques.addFirst(block); 
              RESULT = bloques; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCKS ::= BLOCK 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              ArrayDeque<EstructuraControl> newDeque = new ArrayDeque<>(); 
              newDeque.addFirst(block); 
              RESULT = newDeque;
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCK ::= COMANDOS Endline 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueComando block = (BloqueComando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= IF_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= FOR_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOCK ::= FUNC_DEFINITION 
            {
              EstructuraControl RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EstructuraControl block = (EstructuraControl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = block; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDOS ::= VAR_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMANDOS ::= ASSIGN_DEFINITION_GROUP 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMANDOS ::= FUNC_RETURN 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMANDOS ::= FUNC_CALL 
            {
              BloqueComando RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BloqueComando(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SYM_OBTAIN ::= ID DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, 1, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              GrapeSymbol RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 if (size.getType() != UnderlyingSymbolType.INT) {report_error("Array creation error", null);}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SYM_OBTAIN ::= ID OBracket VALUE NT$0 CBracket DETERMINE VAR_TYPE 
            {
              GrapeSymbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (GrapeSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ValueContainer size = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, (double)size.getValue(), 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_OBTAIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SYM_ARGS ::= VAR_DEFINITION SYM_ARGS_P 
            {
              VarNode[] RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarNode arg = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<VarNode> stack = (Stack<VarNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(arg); RESULT = stack.toArray(new VarNode[0]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SYM_ARGS ::= 
            {
              VarNode[] RESULT =null;
		RESULT = new VarNode[0];
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SYM_ARGS_P ::= COMA VAR_DEFINITION SYM_ARGS_P 
            {
              Stack<VarNode> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarNode arg = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<VarNode> stack = (Stack<VarNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(arg); RESULT = stack;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS_P",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SYM_ARGS_P ::= 
            {
              Stack<VarNode> RESULT =null;
		RESULT = new Stack<VarNode>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYM_ARGS_P",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION_ARRAY ::= EXPRESION EXPRESION_ARRAY_P 
            {
              Expresion[] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> stack = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(e1); RESULT = stack.toArray(new Expresion[0]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_ARRAY ::= 
            {
              Expresion[] RESULT =null;
		RESULT = new Expresion[0];
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_ARRAY_P ::= COMA EXPRESION EXPRESION_ARRAY_P 
            {
              Stack<Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> stack = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stack.add(e1); RESULT = stack;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY_P",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION_ARRAY_P ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<Node>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARRAY_P",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAR_DEFINITION_GROUP ::= VAR_DEFINITION 
            {
              VarNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarNode e1 = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN ASSIGN EXPRESION 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  RESULT = new VarNode(s, val);
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN 
            {
              VarNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GrapeSymbol s = (GrapeSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

  RESULT = new VarNode(s, null); 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MUL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= MINUS EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(new ValueNode(new ValueContainer(0.0,UnderlyingSymbolType.INT)), e1, Operator.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= OBracket EXPRESION CBracket 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddressNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= VALUE 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer e1 = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESPECIAL_EXPRESIONS ::= ID INCREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESPECIAL_EXPRESIONS ::= ID DECREMENT 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESPECIAL_EXPRESIONS ::= INCREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.INCREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESPECIAL_EXPRESIONS ::= DECREMENT ID 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncrementNode(e1, Operator.DECREMENT, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGN_DEFINITION_GROUP ::= ASSIGN_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASSIGN_DEFINITION_GROUP ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION_GROUP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASSIGN_DEFINITION ::= ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignNode(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION NEQ EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION GT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION LT EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION GE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION LE EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(e1,e2, Operator.XOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_DEFINITION ::= IF_STATEMENT ELSE_STATEMENT 
            {
              EstructuraControl RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfNode e1 = (IfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeque<EstructuraControl> e2 = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setElseBody(e2); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE_STATEMENT ::= ELSE OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              ArrayDeque<EstructuraControl> RESULT =null;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> elseBlock = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = elseBlock; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE_STATEMENT ::= 
            {
              ArrayDeque<EstructuraControl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_STATEMENT ::= IF EXPRESION OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              IfNode RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfNode(conditional,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline ASSIGN_DEFINITION_GROUP OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,increment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP Endline EXPRESION Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarNode instance = (VarNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(instance,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR_DEFINITION ::= FOR Endline EXPRESION Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node conditional = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,conditional,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR_DEFINITION ::= FOR Endline Endline OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(null,null,body,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= FUNC_CALL 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNC_DEFINITION ::= FUNC ID OBracket SYM_ARGS CBracket ARROW VAR_TYPE OPEN_BLOCK BLOCKS CLOSE_BLOCK 
            {
              EstructuraControl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarNode[] params = (VarNode[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		UnderlyingSymbolType tipe = (UnderlyingSymbolType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayDeque<EstructuraControl> body = (ArrayDeque<EstructuraControl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  FunctionSymbol f = new FunctionSymbol(name, params, ASTExplorer.makeNewTmpVar(tipe)); // Crear funcion con su tipo de retorno especificado
  RESULT = new FuncNode(f,body);  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DEFINITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNC_RETURN ::= RETURN EXPRESION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReturnFuncNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_RETURN",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNC_CALL ::= ID OBracket EXPRESION_ARRAY CBracket 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion[] params = (Expresion[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  RESULT = new FuncCallNode(name,params);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
