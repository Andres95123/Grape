
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.*;
import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Definiciones.*;
import java.util.Stack;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\011\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\002\003\000\002\002\003\000\002\003\010\000\002" +
    "\004\006\000\002\005\005\000\002\005\003\000\002\014" +
    "\002\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\006\011\000\002\006\007\000\002\007\015\000\002" +
    "\010\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\022\005\020\010\021\011\011\012\024\016" +
    "\015\020\013\024\023\026\007\001\002\000\004\043\ufff7" +
    "\001\002\000\004\043\ufffa\001\002\000\004\043\ufff8\001" +
    "\002\000\004\005\132\001\002\000\004\043\130\001\002" +
    "\000\004\005\125\001\002\000\004\043\ufffd\001\002\000" +
    "\004\005\117\001\002\000\004\043\ufff9\001\002\000\004" +
    "\041\105\001\002\000\004\043\ufffc\001\002\000\004\043" +
    "\ufffb\001\002\000\010\024\073\026\074\032\103\001\002" +
    "\000\004\005\076\001\002\000\006\042\ufff3\043\ufff3\001" +
    "\002\000\004\005\075\001\002\000\044\004\033\005\030" +
    "\013\ufff2\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\034\001\002\000\004\002\027\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\042" +
    "\013\uffe9\023\uffe9\024\073\025\uffe9\026\074\027\uffe9\030" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\001\002\000\036\013\uffea\023" +
    "\uffea\025\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\001" +
    "\002\000\032\013\065\023\043\025\036\027\040\030\046" +
    "\031\041\033\051\034\050\035\045\036\037\037\044\040" +
    "\042\001\002\000\036\013\ufff1\023\ufff1\025\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\001\002\000\044\004\033" +
    "\005\030\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\034\042\ufff2\001\002\000\032\023\043\025" +
    "\036\027\040\030\046\031\041\033\051\034\050\035\045" +
    "\036\037\037\044\040\042\042\047\001\002\000\050\004" +
    "\033\005\030\013\ufff2\023\ufff2\024\023\025\ufff2\026\007" +
    "\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\034\042\ufff2\043\ufff2\001\002" +
    "\000\050\004\033\005\030\013\ufff2\023\ufff2\024\023\025" +
    "\ufff2\026\007\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\034\042\ufff2\043" +
    "\ufff2\001\002\000\050\004\033\005\030\013\ufff2\023\ufff2" +
    "\024\023\025\ufff2\026\007\027\ufff2\030\ufff2\031\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\034" +
    "\042\ufff2\043\ufff2\001\002\000\050\004\033\005\030\013" +
    "\ufff2\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030\ufff2" +
    "\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\034\042\ufff2\043\ufff2\001\002\000\050\004\033" +
    "\005\030\013\ufff2\023\ufff2\024\023\025\ufff2\026\007\027" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\034\042\ufff2\043\ufff2\001\002\000" +
    "\050\004\033\005\030\013\ufff2\023\ufff2\024\023\025\ufff2" +
    "\026\007\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\034\042\ufff2\043\ufff2" +
    "\001\002\000\050\004\033\005\030\013\ufff2\023\ufff2\024" +
    "\023\025\ufff2\026\007\027\ufff2\030\ufff2\031\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\034\042" +
    "\ufff2\043\ufff2\001\002\000\050\004\033\005\030\013\ufff2" +
    "\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030\ufff2\031" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\034\042\ufff2\043\ufff2\001\002\000\050\004\033\005" +
    "\030\013\ufff2\023\ufff2\024\023\025\ufff2\026\007\027\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\034\042\ufff2\043\ufff2\001\002\000\036" +
    "\013\uffeb\023\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb" +
    "\043\uffeb\001\002\000\050\004\033\005\030\013\ufff2\023" +
    "\ufff2\024\023\025\ufff2\026\007\027\ufff2\030\ufff2\031\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\034\042\ufff2\043\ufff2\001\002\000\050\004\033\005\030" +
    "\013\ufff2\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\034\042\ufff2\043\ufff2\001\002\000\036\013" +
    "\uffe4\023\043\025\036\027\040\030\046\031\041\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043" +
    "\uffe4\001\002\000\036\013\uffe3\023\043\025\036\027\040" +
    "\030\046\031\041\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\001\002\000\036\013\uffed" +
    "\023\uffed\025\uffed\027\uffed\030\uffed\031\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed" +
    "\001\002\000\036\013\uffe2\023\043\025\036\027\040\030" +
    "\046\031\041\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\001\002\000\036\013\uffe0\023" +
    "\043\025\036\027\040\030\046\031\041\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\001" +
    "\002\000\036\013\ufff0\023\ufff0\025\ufff0\027\040\030\046" +
    "\031\041\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\001\002\000\036\013\uffdf\023\043" +
    "\025\036\027\040\030\046\031\041\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\001\002" +
    "\000\036\013\uffec\023\uffec\025\uffec\027\uffec\030\uffec\031" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\042\uffec\043\uffec\001\002\000\036\013\uffee\023\uffee\025" +
    "\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\001\002\000" +
    "\036\013\uffe1\023\043\025\036\027\040\030\046\031\041" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\001\002\000\036\013\uffef\023\uffef\025\uffef" +
    "\027\040\030\046\031\041\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\042\uffef\043\uffef\001\002\000\022" +
    "\005\020\010\021\011\011\012\024\016\015\020\013\024" +
    "\023\026\007\001\002\000\006\014\067\015\070\001\002" +
    "\000\022\005\020\010\021\011\011\012\024\016\015\020" +
    "\013\024\023\026\007\001\002\000\004\043\uffdd\001\002" +
    "\000\004\015\072\001\002\000\004\043\uffde\001\002\000" +
    "\036\013\uffe6\023\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\001\002\000\036\013\uffe5\023\uffe5\025\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\001\002\000\036" +
    "\013\uffe8\023\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8" +
    "\043\uffe8\001\002\000\004\007\077\001\002\000\004\006" +
    "\100\001\002\000\004\032\101\001\002\000\044\004\033" +
    "\005\030\023\ufff2\024\023\025\ufff2\026\007\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\034\043\ufff2\001\002\000\032\023\043\025" +
    "\036\027\040\030\046\031\041\033\051\034\050\035\045" +
    "\036\037\037\044\040\042\043\ufff6\001\002\000\046\004" +
    "\033\005\030\023\ufff2\024\023\025\ufff2\026\007\027\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\034\042\ufff2\043\ufff2\001\002\000\034" +
    "\023\043\025\036\027\040\030\046\031\041\033\051\034" +
    "\050\035\045\036\037\037\044\040\042\042\ufff4\043\ufff4" +
    "\001\002\000\006\010\021\011\011\001\002\000\004\043" +
    "\107\001\002\000\044\004\033\005\030\023\ufff2\024\023" +
    "\025\ufff2\026\007\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\034\043\ufff2" +
    "\001\002\000\032\023\043\025\036\027\040\030\046\031" +
    "\041\033\051\034\050\035\045\036\037\037\044\040\042" +
    "\043\111\001\002\000\010\005\020\024\023\026\007\001" +
    "\002\000\004\042\113\001\002\000\004\013\114\001\002" +
    "\000\022\005\020\010\021\011\011\012\024\016\015\020" +
    "\013\024\023\026\007\001\002\000\004\017\116\001\002" +
    "\000\004\043\uffdc\001\002\000\004\041\120\001\002\000" +
    "\004\042\121\001\002\000\004\013\122\001\002\000\022" +
    "\005\020\010\021\011\011\012\024\016\015\020\013\024" +
    "\023\026\007\001\002\000\004\021\124\001\002\000\004" +
    "\043\uffdb\001\002\000\004\032\126\001\002\000\044\004" +
    "\033\005\030\023\ufff2\024\023\025\ufff2\026\007\027\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\034\043\ufff2\001\002\000\032\023\043" +
    "\025\036\027\040\030\046\031\041\033\051\034\050\035" +
    "\045\036\037\037\044\040\042\043\ufff5\001\002\000\034" +
    "\002\uffff\005\020\010\021\011\011\012\024\014\uffff\015" +
    "\uffff\016\015\017\uffff\020\013\021\uffff\024\023\026\007" +
    "\001\002\000\014\002\ufffe\014\ufffe\015\ufffe\017\ufffe\021" +
    "\ufffe\001\002\000\036\013\uffe7\023\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\030\002\011\003\005\004\003\005\015\006" +
    "\016\007\004\010\013\011\024\012\025\013\007\015\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\031\015\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\034\015\030\001\001\000\002\001\001\000\006\014" +
    "\063\015\030\001\001\000\006\014\062\015\030\001\001" +
    "\000\006\014\061\015\030\001\001\000\006\014\060\015" +
    "\030\001\001\000\006\014\057\015\030\001\001\000\006" +
    "\014\056\015\030\001\001\000\006\014\055\015\030\001" +
    "\001\000\006\014\054\015\030\001\001\000\006\014\053" +
    "\015\030\001\001\000\002\001\001\000\006\014\052\015" +
    "\030\001\001\000\006\014\051\015\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\011\003\005\004\003\005\015" +
    "\006\016\007\004\010\013\012\065\013\007\015\021\001" +
    "\001\000\002\001\001\000\026\002\011\003\005\004\003" +
    "\005\015\006\016\007\004\010\013\012\070\013\007\015" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\101\015\030\001\001\000\002\001\001\000" +
    "\006\014\103\015\030\001\001\000\002\001\001\000\010" +
    "\002\105\003\005\004\003\001\001\000\002\001\001\000" +
    "\006\014\107\015\030\001\001\000\002\001\001\000\006" +
    "\005\111\015\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\011\003\005\004\003\005\015\006\016" +
    "\007\004\010\013\012\114\013\007\015\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\011\003\005\004" +
    "\003\005\015\006\016\007\004\010\013\012\122\013\007" +
    "\015\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\126\015\030\001\001\000\002" +
    "\001\001\000\026\002\011\003\005\004\003\005\015\006" +
    "\016\007\004\010\013\012\130\013\007\015\021\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;
  
  // Estructuras de datos para almacenar variables
  private HashMap<String, VariableNode> variables = new HashMap<String, VariableNode>();


  // Funciones propias
  public VariableNode addVar(VariableNode var) {

    if (variables.containsKey(var.getName())) {
      report_error("Variable ya declarada", var.getName());
    }

    variables.put(var.getName(), var);

    return var;
  }


  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CODESTART EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CODESTART ::= BLOCK 
            {
              ProgramNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockNode e1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODESTART",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= COMANDOS Endline 
            {
              BlockNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= COMANDOS Endline BLOCK 
            {
              BlockNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockNode e2 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BlockNode(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMANDOS ::= VAR_DEFINITION_GROUP 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMANDOS ::= ASSIGN_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMANDOS ::= IF_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMANDOS ::= FOR_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDOS ::= FUNCTION_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMANDOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAR_DEFINITION_GROUP ::= VAR_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAR_DEFINITION_GROUP ::= INFER_DEFINITION 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION_GROUP",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VAR_DEFINITION ::= VAR_INVOKER ID DETERMINE VAR_TYPE ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo tipe = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  if (!val.isType(tipe)) {
    report_error("Tipo de variable no coincide con el valor asignado",name);
  } 

  RESULT = addVar(new VariableNode(name, val, tipe));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEFINITION",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INFER_DEFINITION ::= INFER_INVOKER ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  RESULT = addVar(new VariableNode(name, val, val.getType()));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INFER_DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASSIGN_DEFINITION ::= ID ASSIGN EXPRESION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode val = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 

  if (!val.isType(variables.get(id).getType())) {
    report_error("Tipo de variable no coincide con el valor asignado",id);
  }

  RESULT = new AssignNode(variables.get(id),val);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASSIGN_DEFINITION ::= ESPECIAL_EXPRESIONS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode e1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGN_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= 
            {
              DefineNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= VALUE 
            {
              DefineNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValueContainer val = (ValueContainer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueNode(val.getValue(),val.getType()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.ADD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.SUB); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.MUL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= OBracket EXPRESION CBracket 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= ESPECIAL_EXPRESIONS 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = variables.get(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESPECIAL_EXPRESIONS ::= DOUBLE_PLUS ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new ExpresionNode(variables.get(id),new ValueNode(1,Tipo.INT),Operadores.ADD);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESPECIAL_EXPRESIONS ::= DOUBLE_MINUS ID 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new ExpresionNode(variables.get(id),new ValueNode(1,Tipo.INT),Operadores.SUB);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESPECIAL_EXPRESIONS ::= ID DOUBLE_PLUS 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new IncrementNode(variables.get(id),Comandos.ADD);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESPECIAL_EXPRESIONS ::= ID DOUBLE_MINUS 
            {
              DefineNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = new IncrementNode(variables.get(id),Comandos.SUB);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPECIAL_EXPRESIONS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION LT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION GT EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION LE EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION GE EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION NEQ EXPRESION 
            {
              DefineNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefineNode exp2 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionNode(exp1,exp2,Operadores.NEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_DEFINITION ::= IF_INVOKER EXPRESION THEN_INVOKER BLOCK ELSE_INVOKER BLOCK ENDIF_INVOKER 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int com1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BlockNode com1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int com2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode com2 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new IfNode(exp1,com1,com2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_DEFINITION ::= IF_INVOKER EXPRESION THEN_INVOKER BLOCK ENDIF_INVOKER 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DefineNode exp1 = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int com1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int com1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode com1 = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new IfNode(exp1,com1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR_DEFINITION ::= FOR_INVOKER OBracket VAR_DEFINITION_GROUP Endline EXPRESION Endline ASSIGN_DEFINITION CBracket THEN_INVOKER BLOCK ENDFOR_INVOKER 
            {
              Node RESULT =null;
		int instanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int instanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Node instance = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		DefineNode condition = (DefineNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int incrementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node increment = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode body = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new ForNode(instance,condition,body,increment);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_DEFINITION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCTION_DEFINITION ::= FUNCTION_INVOKER ID OBracket CBracket THEN_INVOKER BLOCK ENDFUNCTION_INVOKER 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockNode body = (BlockNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
  RESULT = new FunctionNode(name,body);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DEFINITION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
