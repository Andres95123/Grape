package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import java.io.*;

import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Definiciones.*;

//Librerias
import java.util.Stack;
import java.util.HashMap;

class Parser;

parser code {:

/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;
  
  // Estructuras de datos para almacenar variables
  private HashMap<String, VariableNode> variables = new HashMap<String, VariableNode>();


  // Funciones propias
  public VariableNode addVar(VariableNode var) {

    if (variables.containsKey(var.getName())) {
      report_error("Variable ya declarada", var.getName());
    }

    variables.put(var.getName(), var);

    return var;
  }


  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }


:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:   next_token(); :}
**/

/*Declaraciones Valores*/
terminal ValueContainer VALUE;
terminal String ID;

/*Declaracion Tipos*/
terminal Tipo VAR_TYPE;
terminal DETERMINE,VAR_INVOKER, INFER_INVOKER;
non terminal Node VAR_DEFINITION_GROUP; // Contiene todas las formas de definir variables
non terminal Node VAR_DEFINITION, INFER_DEFINITION;
non terminal Node ASSIGN_DEFINITION;

/*IFs*/
non terminal Node IF_DEFINITION;
terminal IF_INVOKER, THEN_INVOKER, ELSE_INVOKER, ENDIF_INVOKER;

/*Bucles*/
non terminal Node FOR_DEFINITION;
terminal FOR_INVOKER, ENDFOR_INVOKER;

/*Declaraciones Operaciones*/
terminal PLUS,MINUS,MULT,DIV,MOD,ASSIGN;
terminal LT,GT,LE,GE,EQ,NEQ;
terminal OBracket, CBracket;

/*Declaraciones Especiales*/
terminal Endline;

non terminal ProgramNode CODESTART;
non terminal BlockNode BLOCK;
non terminal Node COMANDOS;
non terminal DefineNode EXPRESION;

//Precedencias Estandar
precedence right ASSIGN ;
// precedence left AND, XOR, OR, NOT;
precedence left LT, GT, LE, GE, EQ, NEQ;
precedence left PLUS,MINUS ;
precedence left MULT, DIV, MOD ;
precedence left OBracket, CBracket;

start with CODESTART;

// Inicio de la gramatica

CODESTART ::= BLOCK:e1 {: RESULT = new ProgramNode(e1); :};

BLOCK ::= COMANDOS:e1 Endline {: RESULT = new BlockNode(e1); :} | COMANDOS:e1 Endline BLOCK:e2 {: RESULT = new BlockNode(e1,e2); :};

COMANDOS ::= VAR_DEFINITION_GROUP:e1 {:RESULT = e1;:} | ASSIGN_DEFINITION:e1 {:RESULT = e1;:} | IF_DEFINITION:e1 {: RESULT = e1;:} | FOR_DEFINITION:e1 {: RESULT = e1; :};

// Definicion de variables

VAR_DEFINITION_GROUP ::= VAR_DEFINITION:e1 {: RESULT = e1; :} | INFER_DEFINITION:e1 {: RESULT = e1; :};

VAR_DEFINITION ::= VAR_INVOKER ID:name DETERMINE VAR_TYPE:tipe ASSIGN EXPRESION:val {:

  if (!val.isType(tipe)) {
    report_error("Tipo de variable no coincide con el valor asignado",name);
  } 

  RESULT = addVar(new VariableNode(name, val, tipe));

:} ;

INFER_DEFINITION ::= INFER_INVOKER ID:name ASSIGN EXPRESION:val {:

  RESULT = addVar(new VariableNode(name, val, val.getType()));

:} ;

ASSIGN_DEFINITION ::= ID:id ASSIGN EXPRESION:val {:

  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 

  if (!val.isType(variables.get(id).getType())) {
    report_error("Tipo de variable no coincide con el valor asignado",id);
  }

  RESULT = new AssignNode(variables.get(id),val);

:};





// Definicion de expresiones

EXPRESION ::= ID:id {:
  if (!variables.containsKey(id)) {
    report_error("Variable no declarada con anterioridad",id);
  } 
  RESULT = variables.get(id);
:} | VALUE:val {: RESULT = new ValueNode(val.getValue(),val.getType()); :} 
| EXPRESION:exp1 PLUS EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.ADD); :}
| EXPRESION:exp1 MINUS EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.SUB); :}
| EXPRESION:exp1 MULT EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.MUL); :}
| EXPRESION:exp1 DIV EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.DIV); :}
| EXPRESION:exp1 MOD EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.MOD); :}
| OBracket EXPRESION:exp1 CBracket {: RESULT = exp1; :};



// IFs
// Condicionales
EXPRESION ::= EXPRESION:exp1 LT EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.LT); :}
| EXPRESION:exp1 GT EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.GT); :}
| EXPRESION:exp1 LE EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.LE); :}
| EXPRESION:exp1 GE EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.GE); :}
| EXPRESION:exp1 EQ EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.EQ); :}
| EXPRESION:exp1 NEQ EXPRESION:exp2 {: RESULT = new ExpresionNode(exp1,exp2,Operadores.NEQ); :};

IF_DEFINITION ::= IF_INVOKER EXPRESION:exp1 THEN_INVOKER BLOCK:com1 ELSE_INVOKER BLOCK:com2 ENDIF_INVOKER {:
  RESULT = new IfNode(exp1,com1,com2);
:} | IF_INVOKER EXPRESION:exp1 THEN_INVOKER BLOCK:com1 ENDIF_INVOKER {:
  RESULT = new IfNode(exp1,com1);
:};


// Bucles
FOR_DEFINITION ::= FOR_INVOKER OBracket VAR_DEFINITION_GROUP:instance Endline EXPRESION:condition Endline ASSIGN_DEFINITION:increment CBracket THEN_INVOKER BLOCK:body ENDFOR_INVOKER  {:
  RESULT = new ForNode(instance,condition,increment,body);
:};