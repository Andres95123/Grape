package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import java.io.*;

import com.grape.utils.*;
import com.grape.utils.AST.*;

//Librerias
import java.util.Stack;

class Parser;

parser code {:

/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
  
  // Estructuras de datos para almacenar los errores




  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }


:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:   next_token(); :}
**/

/*Declaraciones Valores*/
terminal ValueContainer VALUE;
terminal String ID;

/*Declaracion Tipos*/
terminal Tipo VAR_TYPE;
terminal DETERMINE,VAR_INVOKER, INFER_INVOKER, FIX_INVOKER;
non terminal StatementNode VARIABLE_DEFINITION, VAR_DEFINITION, INFER_DEFINITION;


/*Declaraciones Operaciones*/
terminal PLUS,MINUS,MULT,DIV,MOD,ASSIGN;

/*Declaraciones Especiales*/
terminal Endline;

non terminal ProgramNode CODESTART;
non terminal StatementNode COMANDOS;
non terminal ExpressionNode EXPRESION;

//Precedencias Estandar
precedence right ASSIGN ;
// precedence left AND, XOR, OR, NOT;
precedence left PLUS,MINUS ;
precedence left MULT, DIV, MOD ;

start with CODESTART;

// Inicio de la gramatica

CODESTART ::= COMANDOS:e1  {: RESULT = new ProgramNode(e1); :}
              | COMANDOS:e1 CODESTART:e2 {: RESULT = new ProgramNode(e1,e2); :};

COMANDOS ::= VAR_DEFINITION:e1 {: RESULT = e1;:} | INFER_DEFINITION:e1 {: RESULT = e1;:} ;

// Definicion de variables

VAR_DEFINITION ::= VAR_INVOKER ID:name DETERMINE VAR_TYPE:tipe ASSIGN EXPRESION:val Endline {:

 RESULT = new OpNode(name, OpType.ASSIGN, val);

:} ;

INFER_DEFINITION ::= INFER_INVOKER ID:name ASSIGN EXPRESION:val Endline {:

  RESULT = new OpNode(name, OpType.ASSIGN, val);

:};

EXPRESION ::= ID:id {: RESULT = new IDNode(blo); :} | VALUE:val {: RESULT = new ValueNode(val.getType(),val.getValue()); :} 
| EXPRESION:exp1 PLUS EXPRESION:exp2 {: RESULT = new BinaryOpNode(exp1,exp2,OpType.ADD); :}
| EXPRESION:exp1 MINUS EXPRESION:exp2 {: RESULT = new BinaryOpNode(exp1,exp2,OpType.SUB); :}
| EXPRESION:exp1 MULT EXPRESION:exp2 {: RESULT = new BinaryOpNode(exp1,exp2,OpType.MUL); :}
| EXPRESION:exp1 DIV EXPRESION:exp2 {: RESULT = new BinaryOpNode(exp1,exp2,OpType.DIV); :}
| EXPRESION:exp1 MOD EXPRESION:exp2 {: RESULT = new BinaryOpNode(exp1,exp2,OpType.MOD); :};



