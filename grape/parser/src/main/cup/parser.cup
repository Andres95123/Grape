package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import java.io.*;

import com.grape.utils.*;
import com.grape.utils.AST.*;
import com.grape.utils.AST.Comandos.*;
import com.grape.utils.AST.Estructuras.*;
import com.grape.utils.AST.Base.*;
import com.grape.Tables.*;
import com.grape.Symbols.*;

//Librerias
import java.util.Stack;
import java.util.HashMap;
import java.util.ArrayDeque;

class Parser;

parser code {:

/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/

  // Booleanos de error
  private boolean error = false;

  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error de sintaxis catastrofico", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    error = true;
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastrofico irrecuperable ("+message+")", info);
    done_parsing();
  }

  public boolean hasError() {
    return error;
  }


:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:   next_token(); :}
**/

/* Declaraciones basicas */
terminal ValueContainer VALUE;
terminal String ID;
terminal UnderlyingSymbolType VAR_TYPE;

/*Declaracion Compuestas */

non terminal GrapeSymbol SYM_OBTAIN;
non terminal VarNode[] SYM_ARGS;
non terminal Stack<VarNode> SYM_ARGS_P;

/*Operaciones Arimeticas*/
terminal PLUS, MINUS, MULT, DIV, MOD;
terminal ASSIGN;
terminal OBracket, CBracket, ARROW;

terminal INCREMENT, DECREMENT;

/*Operaciones Logicas*/
terminal AND, OR, XOR, NOT;

/*Operaciones de Comparacion*/
terminal EQ, NEQ, GT, LT, GE, LE;


/*Declaracion de Estructuras de Control*/

terminal Endline, OPEN_BLOCK, CLOSE_BLOCK, COMA;

non terminal RootNode ROOT;
non terminal EstructuraControl BLOCK, BLOCK_P, GRUPO_COMANDOS, GRUPO_COMANDOS_AUX;
non terminal ArrayDeque<EstructuraControl> BLOCKS;

non terminal BloqueComando COMANDOS;

/* IF */
terminal IF, ELSE;
non terminal EstructuraControl IF_DEFINITION;
non terminal ArrayDeque<EstructuraControl> ELSE_STATEMENT;
non terminal IfNode IF_STATEMENT; 

/* Bucles */
terminal FOR;
non terminal EstructuraControl FOR_DEFINITION;

/* Declaracion de comandos */

/*Declaracion de Variables*/
terminal DETERMINE,VAR_INVOKER, INFER_INVOKER;
non terminal VarNode VAR_DEFINITION_GROUP; // Contiene todas las formas de definir variables
non terminal VarNode VAR_DEFINITION, INFER_DEFINITION;
non terminal Node ASSIGN_DEFINITION, ASSIGN_DEFINITION_GROUP;

/*Funciones*/
terminal RETURN, FUNC;
non terminal FuncArgsNode FUNC_ARGS;
non terminal EstructuraControl FUNC_DEFINITION;
non terminal Node FUNC_CALL;
non terminal Node FUNC_RETURN;

/* Declaraciones de Expresiones */
non terminal Node EXPRESION, ESPECIAL_EXPRESIONS;
non terminal Expresion[] EXPRESION_ARRAY;
non terminal Stack<Node> EXPRESION_ARRAY_P;

//Precedencias Estandar
precedence right ASSIGN ;
// precedence left AND, XOR, OR, NOT;
precedence left ID;
precedence left AND, OR, XOR, NOT;
precedence left PLUS,MINUS ;
precedence left MULT, DIV, MOD ;
precedence left EQ, NEQ, GT, LT, GE, LE;
precedence left OBracket, CBracket;

start with ROOT;

// Inicio de la gramatica

ROOT ::= BLOCKS:bloques {: RESULT = new RootNode(bloques.toArray(new EstructuraControl[0])); :} ;

BLOCKS ::= BLOCK:block BLOCKS:bloques 
            {: 
              bloques.addFirst(block); 
              RESULT = bloques; 
            :}
         | BLOCK:block 
            {: 
              ArrayDeque<EstructuraControl> newDeque = new ArrayDeque<>(); 
              newDeque.addFirst(block); 
              RESULT = newDeque;
            
            :};

BLOCK ::= COMANDOS:block Endline {: RESULT = block; :} | IF_DEFINITION:block {: RESULT = block; :} | FOR_DEFINITION:block {: RESULT = block; :} | FUNC_DEFINITION:block {: RESULT = block; :};

COMANDOS ::= VAR_DEFINITION_GROUP:e1 {:RESULT = new BloqueComando(e1); :} | ASSIGN_DEFINITION_GROUP:e1 {:RESULT = new BloqueComando(e1); :} | FUNC_RETURN:e1 {:RESULT = new BloqueComando(e1); :} | FUNC_CALL:e1 {:RESULT = new BloqueComando(e1); :};

// UTILES

SYM_OBTAIN ::= ID:name DETERMINE VAR_TYPE:tipe {: RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, 1, 0); :}
| ID:name OBracket VALUE:size {: if (size.getType() != UnderlyingSymbolType.INT) {report_error("Array creation error", null);}:} CBracket DETERMINE VAR_TYPE:tipe {: RESULT = new GrapeSymbol(name, SymbolType.ARRAY, tipe, (double)size.getValue(), 0); :};

SYM_ARGS ::= VAR_DEFINITION:arg SYM_ARGS_P:stack {:stack.add(arg); RESULT = stack.toArray(new VarNode[0]);:} | {:RESULT = new VarNode[0];:};

SYM_ARGS_P ::= COMA VAR_DEFINITION:arg SYM_ARGS_P:stack {:stack.add(arg); RESULT = stack;:} | {:RESULT = new Stack<VarNode>();:};

EXPRESION_ARRAY ::=  EXPRESION:e1 EXPRESION_ARRAY_P:stack {:stack.add(e1); RESULT = stack.toArray(new Expresion[0]);:} | {:RESULT = new Expresion[0];:};

EXPRESION_ARRAY_P ::= COMA EXPRESION:e1 EXPRESION_ARRAY_P:stack {:stack.add(e1); RESULT = stack;:} | {:RESULT = new Stack<Node>();:};


// Definicion de variables

VAR_DEFINITION_GROUP ::= VAR_DEFINITION:e1 {: RESULT = e1; :};

VAR_DEFINITION ::= VAR_INVOKER SYM_OBTAIN:s ASSIGN EXPRESION:val {:

  RESULT = new VarNode(s, val);
 
:} | VAR_INVOKER SYM_OBTAIN:s {: 

  RESULT = new VarNode(s, null); 

:};


/* EXPRESIONES */

EXPRESION ::= EXPRESION:e1 PLUS EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.ADD); :}
| EXPRESION:e1 MINUS EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.SUB); :}
| EXPRESION:e1 MULT EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.MUL); :}
| EXPRESION:e1 DIV EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.DIV); :}
| EXPRESION:e1 MOD EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.MOD); :}
| MINUS EXPRESION:e1 {: RESULT = new ExpresionNode(new ValueNode(new ValueContainer(0.0,UnderlyingSymbolType.INT)), e1, Operator.SUB); :}
| OBracket EXPRESION:e1 CBracket {: RESULT = e1; :}
| ID:e1 {: RESULT = new AddressNode(e1); :}
| ESPECIAL_EXPRESIONS:e1 {: RESULT = e1; :}
| VALUE:e1 {: RESULT = new ValueNode(e1); :};

ESPECIAL_EXPRESIONS ::= ID:e1 INCREMENT {: RESULT = new IncrementNode(e1, Operator.INCREMENT, true); :}
| ID:e1 DECREMENT {: RESULT = new IncrementNode(e1, Operator.DECREMENT, true); :}
| INCREMENT ID:e1 {: RESULT = new IncrementNode(e1, Operator.INCREMENT, false); :}
| DECREMENT ID:e1 {: RESULT = new IncrementNode(e1, Operator.DECREMENT, false); :};

/* ASIGNACION */

ASSIGN_DEFINITION_GROUP ::= ASSIGN_DEFINITION:e1 {: RESULT = e1; :} | ESPECIAL_EXPRESIONS:e1 {: RESULT = e1; :};

ASSIGN_DEFINITION ::= ID:e1 ASSIGN EXPRESION:e2 {: RESULT = new AssignNode(e1, e2); :};

/* IF / CONDICIONALES */

EXPRESION ::= EXPRESION:e1 EQ EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.EQ); :}
| EXPRESION:e1 NEQ EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.NEQ); :}
| EXPRESION:e1 GT EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.GT); :}
| EXPRESION:e1 LT EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.LT); :}
| EXPRESION:e1 GE EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.GE); :}
| EXPRESION:e1 LE EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.LE); :}
| EXPRESION:e1 AND EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.AND); :}
| EXPRESION:e1 OR EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.OR); :}
| EXPRESION:e1 XOR EXPRESION:e2 {: RESULT = new ExpresionNode(e1,e2, Operator.XOR); :};

IF_DEFINITION ::= IF_STATEMENT:e1 ELSE_STATEMENT:e2  {: e1.setElseBody(e2); RESULT = e1; :};

ELSE_STATEMENT ::= ELSE OPEN_BLOCK BLOCKS:elseBlock CLOSE_BLOCK  {: RESULT = elseBlock; :} | ;
IF_STATEMENT ::= IF EXPRESION:conditional OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new IfNode(conditional,body); :};

/* Bucles */

FOR_DEFINITION ::= FOR VAR_DEFINITION_GROUP:instance Endline EXPRESION:conditional Endline ASSIGN_DEFINITION_GROUP:increment OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new ForNode(instance,conditional,body,increment); :}
| FOR Endline EXPRESION:conditional Endline ASSIGN_DEFINITION_GROUP:increment OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new ForNode(null,conditional,body,increment); :}
| FOR VAR_DEFINITION_GROUP:instance Endline EXPRESION:conditional Endline OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new ForNode(instance,conditional,body,null); :}
| FOR Endline EXPRESION:conditional Endline OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new ForNode(null,conditional,body,null); :}
| FOR Endline Endline OPEN_BLOCK BLOCKS:body CLOSE_BLOCK  {: RESULT = new ForNode(null,null,body,null); :};

/* Funciones */

EXPRESION ::= FUNC_CALL:e1 {: RESULT = e1; :};

FUNC_DEFINITION ::= FUNC ID:name OBracket SYM_ARGS:params CBracket ARROW VAR_TYPE:tipe OPEN_BLOCK BLOCKS:body CLOSE_BLOCK {: 
  FunctionSymbol f = new FunctionSymbol(name, params, ASTExplorer.makeNewTmpVar(tipe)); // Crear funcion con su tipo de retorno especificado
  RESULT = new FuncNode(f,body);  
:};

FUNC_RETURN ::= RETURN EXPRESION:e1 {: RESULT = new ReturnFuncNode(e1); :}; 

FUNC_CALL ::= ID:name OBracket EXPRESION_ARRAY:params CBracket {: 
  RESULT = new FuncCallNode(name,params);
:};