package com.grape.cup;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import java.io.*;

//Librerias

class Parser;

parser code {:

/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
  



  /**********************************************************************
   * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
   **********************************************************************/

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
    report_error("Error sintàctic catastròfic", cur_token);
    done_parsing();    
  }

  @Override
  public void syntax_error(Symbol cur_token) {
    report_error("de sintaxis", cur_token);
  }

  @Override
  public void report_error(String message, Object info) {
    StringBuilder msg = new StringBuilder("ERROR");
    if (info instanceof Symbol) {
      ComplexSymbol token = (ComplexSymbol)info;
      Location l = token.getLeft();
      
      if (l != null) {
        msg.append(" (fila: ")
          .append(l.getLine())
          .append(", columna: ")
          .append(l.getColumn())
          .append(")");
      }
    }
    msg.append(": ").append(message);
    
    System.err.println(msg);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception {
    report_error("Error catastròfic ("+message+")", info);
    done_parsing();
  }

:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:   next_token(); :}
**/

/*Declaraciones Valores*/
terminal Double NUM;

/*Declaraciones Operaciones*/
terminal PLUS,MINUS;

/*Declaraciones Especiales*/
terminal PCOMA;

non terminal CodeStart, Comando;

//Precedencias Estandar
// precedence right ASSIGN ;
// precedence left AND, XOR, OR, NOT;
// precedence left ADD, SUB ;
// precedence left MUL, DIV, MOD ;
// precedence left PADD, PSUB ;
// precedence left LP,RP;

start with CodeStart;

CodeStart ::= Comando CodeStart
            |  ;

Comando ::= NUM PLUS NUM PCOMA
          | NUM MINUS NUM PCOMA
          ;

